/// Reference to an oriented manifold in a [`Space`].
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ManifoldRef {
    /// Unoriented ID.
    pub id: ManifoldId,
    /// Orientation.
    pub sign: Sign,
}
impl fmt::Display for ManifoldRef {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}{}", self.sign, self.id)
    }
}
impl From<ManifoldId> for ManifoldRef {
    fn from(id: ManifoldId) -> Self {
        ManifoldRef {
            id,
            sign: Sign::Pos,
        }
    }
}
impl Fits64 for ManifoldRef {
    unsafe fn from_u64(x: u64) -> Self {
        Self {
            id: ManifoldId::from_u64(x >> 1),
            sign: if x & 1 == 0 { Sign::Pos } else { Sign::Neg },
        }
    }

    fn to_u64(self) -> u64 {
        (self.id.to_u64() << 1) | self.sign as u64
    }
}
impl Neg for ManifoldRef {
    type Output = Self;

    fn neg(mut self) -> Self::Output {
        self.sign = -self.sign;
        self
    }
}
impl PartialOrd for ManifoldRef {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl Ord for ManifoldRef {
    fn cmp(&self, other: &Self) -> Ordering {
        self.to_u64().cmp(&other.to_u64())
    }
}
hypermath::impl_mul_sign!(impl Mul<Sign> for ManifoldRef);
hypermath::impl_mulassign_sign!(impl MulAssign<Sign> for ManifoldRef);
