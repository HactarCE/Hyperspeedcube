use * from euclid

export fn name(n: Nat) -> Str {
    "${@shapes/i/polygon.adjective(n)} Prism"
}
export fn aliases(n: Nat) -> List[Str] {
    @shapes/i/polygon.aliases(n).map(fn(s) { "${s} Prism" })
}
export fn adjective(n: Nat) -> Str { name(n) }
export fn facet_colors(n: Nat) -> Str { "polygonal_prism:${n}" }
export ndim = 3
export shape_tag = "3d/prism"

export fn new(n: Nat) -> Map { new(n, ident()) }
export fn new(n: Nat, t: Transform) -> Map {
    export fn transform_by(t2: Transform) -> Map { new(n, t2 * t) }

    export name = name(n)
    export aliases = aliases(n)
    export adjective = adjective(n)
    export facet_colors = facet_colors(n)
    export ndim, shape_tag

    product = @shapes/product(#{
        polygon = @shapes/i/polygon.new(n),
        line = @shapes/line.new(),
    }).transform_by(t)
    use sym, polygon, line from product
    export sym, polygon, line

    export h = product.polygon.edge_length / 2

    export base_pole = line.endpoint * h
    export base_names = line.names("U", "D")

    export side_pole = polygon.edge_pole
    export side_names = "F${polygon.edge_names}"
}

export fn facet_colors_list(n: Nat) -> List[Map] {
    (
        [
            #{name = "U", display = "Up",   default = "Mono Dyad [1]" },
            #{name = "D", display = "Down", default = "Mono Dyad [2]" },
        ]
        ++
        (0..n).map(fn(i) {
            #{
                name = "F${to_base26(i)}",
                default = "Rainbow [${i}/${n}]",
            }
        })
    )
}

add_color_system_generator(
    id = "polygonal_prism",
    name = "Polygonal Prism",
    params = [@shapes/i/polygon.param_size("Polygon size")],
    gen = fn(n) { #{name = name(n), colors = facet_colors_list(n)} },
)

add_puzzle_generator(
    id = "polygonal_prism",
    version = "1.0.0",
    name = "Polygonal Prism",
    params = [@shapes/i/polygon.param_size("Polygon size")],
    engine = "euclid",
    gen = fn(n) {
        return #{
            name = name(n),
            ndim = ndim,
            colors = facet_colors(n),
            build = fn() {
                use sym, polygon, line, h from new(n)
                with #sym = sym {
                    carve(plane(line.endpoint * h), line.names("U", "D"))
                    carve(plane(polygon.edge_pole), "F${polygon.edge_names}")
                }
            },
        }
    },

    tags = #{
        schema = 1,
        type = "shape",
        stable = "2.0.0",
        shape = shape_tag,
    },
)
