use * from euclid

add_puzzle_generator(
    id = "ft_cube",
    name = "NxNxN Face-Turning Cube",
    aliases = ["N^3"],
    params = [
        #{name = "Layers", type = Int, default = 3, min = 1, max = 49},
    ],
    engine = "euclid",
    colors = "cube",
    twists = "ft_cubic",
    gen = fn(n) {
        return #{
            name = "${n}x${n}x${n}",
            aliases = ["${n}^3"],
            ndim = 3,
            build = fn() {
                sym = cd("bc3")

                with #sym = sym {
                    // Carve shape
                    carve(plane(#sym.oox.unit), @symmetries/bc3.cube().face_names)

                    // Slice layers
                    add_layers(#twists.face_axis, @^/common.cut_depths(3, n))
                }

                @piece_types/triacron_subsets.mark_multilayer_UFRL(n)
                unify_piece_types(sym.chiral) // chiral because left vs. right obliques
            },

            tags = #{
                type = "puzzle",
                completeness = #{
                    laminated = n <= 2,
                    real = n <= 3,
                    super = n <= 2,
                },
                "cuts/depth/deep/to_adjacent" = n.is_even(),
                "cuts/depth/half" = n.is_even(),
                "external/leaderboard" = n >= 2,
                "pieces/acronic" = n <= 3,
                "pieces/standard" = true,
            },
        }
    },

    tags = #{
        schema = 1,
        author = ["Andrew Farkas", "Milo Jacquet"],
        shape = "3d/platonic/cube",
        axes = "3d/elementary/cubic",
        turns_by = ["facet", "face"],
        algebraic = ["doctrinaire", "pseudo/doctrinaire"],
        cuts = "depth/shallow",
    },

    examples = [
        #{params = [2], aliases = ["Pocket Cube"], tags = #{
            inventor = "Ernő Rubik",
            external = #{gelatinbrain = "3.1.1", museum = 20, wca = "222"},
        }},
        #{params = [3], aliases = ["Rubik's Cube"], tags = #{
            inventor = "Ernő Rubik",
            external = #{gelatinbrain = "3.1.2", museum = 7629, wca = "333"},
            canonical = true,
        }},
        #{params = [4], aliases = ["Rubik's Revenge"], tags = #{
            inventor = "Peter Sebesteny",
            external = #{gelatinbrain = "3.1.3", museum = 265, wca = "444"},
        }},
        #{params = [5], aliases = ["Professor's Cube"], tags = #{
            inventor = "Jürgen Hoffmann",
            external = #{gelatinbrain = "3.1.4", museum = 6106, wca = "555"},
        }},
        #{params = [6], tags = #{
            inventor = "Daniel Tseng",
            external = #{museum = 3931, wca = "666"},
        }},
        #{params = [7], tags = #{
            inventor = "Panagiotis Verdes",
            external = #{museum = 1486, wca = "777"},
        }},
    ],
)

add_twist_system(
    id = "ft_cubic",
    name = "Cubic",
    ndim = 3,
    engine = "euclid",
    build = fn() {
        sym = cd("bc3")

        // Add axes and twists
        with #sym = sym {
            export face_axis = add_axis(#sym.oox, @symmetries/bc3.cube().face_names)
            use F, U, R from #axes
            add_twist(F, #sym.thru([1, 0]), gizmo_pole_distance = 1)
        }

        // Add global twist directions
        fn cw(axis) { #twists[axis.name] }
        fn ccw(axis) { #twists[axis.name].rev() }
        add_twist_direction("CW", fn(ax) { [cw(ax)] })
        add_twist_direction("CW2", fn(ax) { [cw(ax), cw(ax)] })
        add_twist_direction("CCW", fn(ax) { [ccw(ax)] })
        add_twist_direction("CCW2", fn(ax) { [ccw(ax), ccw(ax)] })

        // Add cubic vantage group
        add_vantage_group(
            id = "cubic",
            symmetry = sym,
            refs = [[sym.oox, @symmetries/bc3.cube().face_names]],
            init = ["F", "U"],
        )

        // Add face-centered cubic vantage set
        F = sym.oox
        U = sym.thru(2).transform(F)
        R = sym.thru(1).transform(U)
        x = rot(fix = U, start = R, end = F)
        y = rot(fix = R, start = F, end = U)
        z = rot(fix = F, start = U, end = R)
        add_vantage_set(
            name = "Face-centered",
            group = "cubic",
            view_offset = rot(start = vec(x=1), end = vec(z=1), angle = 20°)
                        * rot(start = vec(y=1), end = vec(z=1), angle = 35°),
            transforms = #{
                x = x, "x'" = x.rev(),
                y = y, "y'" = y.rev(),
                z = z, "z'" = z.rev(),
            },
            axes = "*",
        )
    },
)
