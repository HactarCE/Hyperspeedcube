local function a(s) return
local function tw(s) return self.twists[s] end

local t = self.compose_twist_transforms

local R = self.axes.R(1)
local L = self.axes.L(1)
local U = self.axes.U(1)
local D = self.axes.D(1)
local F = self.axes.F(1)
local B = self.axes.B(1)
tw'U+'
local RF = self.twists['U+'].transform:transform(R)
local UF = self.twists['R+'].transform:transform(F)
local RU = self.twists['F+'].transform:transform(U)
self.twists['U+']

rot{from=F.axis, to=U.axis, fix=R.axis}
rot{from=R.axis, to=U.axis, fix=F.axis}



local triangle_region = U & RF & !R & !F
local fang_region = LU & !LF & F & FR

edges/edge
edges/wing

centers/oblique

centers/t2

Center - T2


Centers/T-centers (2)


Show centers

Show centers (T2)

Show centers (oblique 1,2,3)

bagua_cube:
- centers: U & !symmetry(U_plus):orbit(F.transform):union()
- triangles: triangle_region | U_plus:transform(triangle_region)
- edges:
  - diamonds: RF & LF & RU & LU
  - fangs:
    - right fang: fang_region
    - left fang: sym:thru(1):transform(fang_region)
  - slabs: !R & U & F & !LF & !LU
- corners: R & U & F




local UF, UR, UL, FR, FL

local copter_corner_region = UR & UF & FR
local skewb_corner_region = RUB & RDF & LUF
local copter_petal_region = !UR & UF & FR

twins_skewb:
- edges:
  - edges/fangs: ...
  - edges/diamonds: skewb_corner_region & UF
- stems:
  - stems/inner: ...
  - stems/outer: copter_petal_region & RUB
- corners:
  - corners/petals: UF_plus:transform(copter_corner_region)
  - corners/corners: copter_corner_region

fto:
- triangles
- edges
- corners

pyraminx_4_layer:
- edges:
  - primary edges
  - wings
- centers:
  - primary centers
- middle axials
- tips
