fn cube() { cube(#{}) }

print(1)
print([1])
print(#{a:1})
print(1,)
print([1,])
print(#{a:1,})

fn cube(props) {
    scale = props.scale ?? 1
    basis = props.basis ?? "xyz"
    export name = "Cube"
    export aliases = ["3-Cube", "Hexahedron", "1x1x1"]
    export face_colors = "cube"
    export sym = cd("bc3", basis)
    export fn iter_poles() {
        this.sym.orbit([names, this.sym.oox.unit * scale]).named(#{
            F: [],
            U: [3, "F"],
            R: [2, "U"],
            L: [1, "R"],
            D: [2, "L"],
            B: [3, "D"],
        })
    }
    export fn iter_edge_poles() {
        this.sym.orbit(this.sym.oxo.unit * scale * sqrt(2)).named(#{
            "{FU}": [],
            "{FR}": [2, "FU"],
            "{FL}": [1, "FR"],
            "{FD}": [2, "FL"],
            "{UR}": [3, "FR"],
            "{UL}": [3, "FL"],
            "{DR}": [2, "UL"],
            "{DL}": [1, "DR"],
            "{BU}": [3, "FD"],
            "{BR}": [2, "BU"],
            "{BL}": [1, "BR"],
            "{BD}": [2, "BL"],
        })
    }
}

// Cube
color_systems = []
color_systems.push(#{
    id: "cube",
    name: "Cube",

    colors: [
        #{ name: "R", display: "Right" },
        #{ name: "L", display: "Left" },
        #{ name: "U", display: "Up" },
        #{ name: "D", display: "Down" },
        #{ name: "F", display: "Front" },
        #{ name: "B", display: "Back" },
    ],

    schemes: [
        #{
            name: "Western",
            map: #{
                R: "Red",
                L: "Orange",
                U: "White",
                D: "Yellow",
                F: "Green",
                B: "Blue",
            },
        },
        #{
            name: "Japanese",
            map: #{
                R: "Red",
                L: "Orange",
                U: "White",
                D: "Blue",
                F: "Green",
                B: "Yellow",
            },
        },
    ],
    "default": "Western",
})




// N-Layer Megaminx generator
fn f() {
    SHALLOW_FT_DODECAHEDRON_EXAMPLES = #{}

    return #{
        id: "ft_dodecahedron",
        version: "1.0.0",
        name: "N-Layer Megaminx",
        colors: "dodecahedron",
        params: [
            #{ name: "Layers", type: "int", "default": 1, min: 0, max: 10 },
        ],
        gen: fn(params) {
            size = params[1]
            if size == 0 { return "dodecahedron" }
            return #{
                name: size + "-Layer Face-Turning Dodecahedron",
                ndim: 3,
                build: fn(this) {
                    cut_depths = shallow_ft_dodecahedron_cut_depths(size)
                    shape = this.construct_ft_dodecahedron(cut_depths)
                    lib = null

                    if size == 0 {
                        lib.piece_types.mark_everything_core(this)
                        return
                    }

                    // Mark piece types
                    lib.piece_types.triacron_subsets.mark_multilayer_UFRL(this, 2*size + 1)
                    this.unify_piece_types(shape.sym.chiral) // chiral because left vs. right obliques
                },

                tags: #{
                    "type/puzzle": true,
                    completeness: #{
                        real: size <= 1,
                    },
                },
            }
        },

        examples: SHALLOW_FT_DODECAHEDRON_EXAMPLES,

        tags: #{
            builtin: "2.0.0",
            external: [ "!gelatinbrain", "!hof", "!mc4d", "!museum", "!wca" ],

            author: [ "Andrew Farkas", "Milo Jacquet" ],
            "inventor": false,

            "shape/3d/platonic/dodecahedron": true,
            algebraic: [
                "doctrinaire", "pseudo/doctrinaire",
                "!abelian", "!trivial", "!fused", "!orientations/non_abelian", "!trivial", "!weird_orbits",
            ],
            axes: [ "3d/elementary/dodecahedral", "!hybrid", "!multicore" ],
            colors: [ "!multi_facet_per", "!multi_per_facet" ],
            completeness: [ "!complex", "!laminated", "!super" ],
            cuts: #{ depth: [ "shallow" ], "stored": false, "wedge": false },
            turns_by: [ "face", "facet" ],
            "experimental": false,
            "canonical": false,
            "family": false,
            "variant": false,
            "meme": false,
            "shapeshifting": false,
        },
    }
}

color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())
color_systems.push(f())


export color_systems
