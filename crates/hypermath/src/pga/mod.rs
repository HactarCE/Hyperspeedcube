//! [Projective geometric algebra](https://w.wiki/9sz8).
//!
//! This uses the conventions defined by the [Rigid Geometric Algebra
//! wiki](https://rigidgeometricalgebra.org/wiki/index.php?title=Main_Page).

mod autogenerated_lookup_tables;
mod axes;
mod blade;
mod motor;
mod term;

pub use axes::Axes;
pub use blade::Blade;
pub use motor::{Motor, TransformByMotor};
pub use term::Term;

fn n_choose_k(n: u8, k: u8) -> u8 {
    use autogenerated_lookup_tables::N_CHOOSE_K;

    N_CHOOSE_K[n as usize][k as usize]
}
fn multivector_term_order(ndim: u8, grade: u8) -> &'static [u8] {
    use autogenerated_lookup_tables::MULTIVECTOR_TERM_ORDER;

    &MULTIVECTOR_TERM_ORDER[grade as usize][0..n_choose_k(ndim + 1, grade) as usize]
}

fn debug_multivector_struct_fields(
    f: &mut std::fmt::DebugStruct<'_, '_>,
    terms: impl Iterator<Item = Term>,
) {
    for term in terms {
        let field_name = if term.axes == Axes::SCALAR {
            "S".to_string() // scalar
        } else {
            term.axes.to_string()
        };
        f.field(&field_name, &term.coef);
    }
}

fn display_multivector(
    f: &mut std::fmt::Formatter<'_>,
    mut terms: impl Iterator<Item = Term>,
) -> std::fmt::Result {
    if let Some(term) = terms.next() {
        write!(f, "{term}")?;
    }
    for term in terms {
        write!(f, " + {term}")?;
    }
    Ok(())
}

#[cfg(test)]
mod tests;
