//! Autogenerated locale module.
//!
//! DO NOT MODIFY THIS FILE DIRECTLY. Instead modify the KDL files.
#![allow(unused_imports)]

#[rustfmt::skip]
#[allow(unused)]
const LANGS: &[(&str, structs::Lang)] = &[
    ("en", en::LANG),
];

#[rustfmt::skip]
pub use structs::{HoverStrings, Lang, PresetActions, PresetErrors, PresetStrings};
pub use traits::*;

#[rustfmt::skip]
#[allow(non_camel_case_types)]
pub mod traits {
    use std::fmt::Debug;

    pub trait Template___current_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            current: &str,
        ) -> String;
    }

    pub trait Template___n_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            n: &str,
        ) -> String;
    }

    pub trait Template___click_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            click: &str,
        ) -> String;
    }

    pub trait Template___color_reassign_mousebind_str___dragging_bool: Debug {
        #[allow(unused)]
        fn with(
            &self,
            color_reassign_mousebind: &str,
            dragging: bool,
        ) -> String;
    }

    pub trait Template___app_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            app: &str,
        ) -> String;
    }

    pub trait Template___loc_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            loc: &str,
        ) -> String;
    }

    pub trait Template___color_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            color: &str,
        ) -> String;
    }

    pub trait Template___modifier_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            modifier: &str,
        ) -> String;
    }

    pub trait Template___error_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            error: &str,
        ) -> String;
    }

    pub trait Template___value_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            value: &str,
        ) -> String;
    }

    pub trait Template___id_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            id: &str,
        ) -> String;
    }

    pub trait Template___puzzle_color_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            puzzle_color: &str,
        ) -> String;
    }

    pub trait Template___alignment_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            alignment: &str,
        ) -> String;
    }

    pub trait Template___license_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            license: &str,
        ) -> String;
    }

    pub trait Template___author_list_str: Debug {
        #[allow(unused)]
        fn with(
            &self,
            author_list: &str,
        ) -> String;
    }
}

#[rustfmt::skip]
#[allow(non_camel_case_types)]
mod structs {
    use super::traits::*;
    #[derive(Debug)]
    pub struct HoverStrings {
        pub label: &'static str,
        pub full: &'static str,
        pub desc: &'static str,
    }
    impl HoverStrings {
        pub const DEFAULT: Self = Self {
            label: "",
            full: "",
            desc: "",
        };
    }

    #[derive(Debug)]
    pub struct PresetStrings {
        pub saved_presets: &'static str,
        pub current: &'static dyn Template___current_str,
        pub current_empty: &'static str,
        pub new_name_hint: &'static str,
        pub errors: PresetErrors,
        pub actions: PresetActions,
    }

    #[derive(Debug)]
    pub struct PresetErrors {
        pub empty_name: &'static str,
        pub name_conflict: &'static str,
        pub cannot_delete_last: &'static str,
    }

    #[derive(Debug)]
    pub struct PresetActions {
        pub add: &'static str,
        pub rename: &'static str,
        pub delete: &'static str,
    }

    #[derive(Debug)]
    pub struct Tabs_Menu {
        pub puzzle: &'static str,
        pub puzzle_catalog: &'static str,
        pub puzzle_info: &'static str,
        pub keybinds_reference: &'static str,
        pub about: &'static str,
        pub colors: &'static str,
        pub styles: &'static str,
        pub view: &'static str,
        pub animations: &'static str,
        pub interaction: &'static str,
        pub keybinds: &'static str,
        pub mousebinds: &'static str,
        pub camera: &'static str,
        pub image_generator: &'static str,
        pub macros: &'static str,
        pub modifier_keys: &'static str,
        pub move_input: &'static str,
        pub piece_filters: &'static str,
        pub puzzle_controls: &'static str,
        pub scrambler: &'static str,
        pub timeline: &'static str,
        pub timer: &'static str,
        pub lua_logs: &'static str,
        pub dev_tools: &'static str,
        pub debug: &'static str,
    }

    #[derive(Debug)]
    pub struct Tabs_Titles_Puzzle {
        pub empty: &'static str,
        pub loading: &'static dyn Template___id_str,
        pub error: &'static dyn Template___id_str,
    }

    #[derive(Debug)]
    pub struct Tabs_Titles {
        pub puzzle: Tabs_Titles_Puzzle,
        pub puzzle_catalog: &'static str,
        pub puzzle_info: &'static str,
        pub keybinds_reference: &'static str,
        pub about: &'static str,
        pub colors: &'static str,
        pub styles: &'static str,
        pub view: &'static str,
        pub animations: &'static str,
        pub interaction: &'static str,
        pub keybinds: &'static str,
        pub mousebinds: &'static str,
        pub camera: &'static str,
        pub image_generator: &'static str,
        pub macros: &'static str,
        pub modifier_keys: &'static str,
        pub move_input: &'static str,
        pub piece_filters: &'static str,
        pub puzzle_controls: &'static str,
        pub scrambler: &'static str,
        pub timeline: &'static str,
        pub timer: &'static str,
        pub lua_logs: &'static str,
        pub dev_tools: &'static str,
        pub debug: &'static str,
    }

    #[derive(Debug)]
    pub struct Tabs {
        pub menu: Tabs_Menu,
        pub titles: Tabs_Titles,
    }

    #[derive(Debug)]
    pub struct TopBar {
        pub desktop_link: &'static str,
        pub desktop_link_hover: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_File {
        pub title: &'static str,
        pub open: &'static str,
        pub open_clipboard: &'static str,
        pub save: &'static str,
        pub save_as: &'static str,
        pub copy_hsc: &'static str,
        pub copy_log: &'static str,
        pub exit: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Edit {
        pub title: &'static str,
        pub undo_twist: &'static str,
        pub redo_twist: &'static str,
        pub reset_puzzle: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Scramble {
        pub title: &'static str,
        pub full: &'static str,
        pub one: &'static str,
        pub two: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Settings {
        pub title: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Tools {
        pub title: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Puzzles {
        pub title: &'static str,
        pub custom: &'static str,
        pub show_lua_dir: &'static str,
        pub extract_lua: &'static str,
        pub show_experimental: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Help {
        pub title: &'static str,
        pub guides: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu_Debug {
        pub title: &'static str,
    }

    #[derive(Debug)]
    pub struct Menu {
        pub title: &'static str,
        pub file: Menu_File,
        pub edit: Menu_Edit,
        pub scramble: Menu_Scramble,
        pub settings: Menu_Settings,
        pub tools: Menu_Tools,
        pub puzzles: Menu_Puzzles,
        pub help: Menu_Help,
        pub debug: Menu_Debug,
    }

    #[derive(Debug)]
    pub struct ClickTo {
        pub activate: &'static dyn Template___click_str,
        pub copy_hex: &'static dyn Template___click_str,
        pub delete: &'static dyn Template___click_str,
        pub edit: &'static dyn Template___click_str,
        pub rename: &'static dyn Template___click_str,
        pub rename_or_delete: &'static dyn Template___click_str,
        pub reorder: &'static dyn Template___click_str,
    }

    #[derive(Debug)]
    pub struct Inputs {
        pub click: &'static str,
        pub right_click: &'static str,
        pub middle_click_or_alt_click: &'static str,
        pub alt_click: &'static str,
        pub drag: &'static str,
    }

    #[derive(Debug)]
    pub struct Statuses {
        pub saved: &'static str,
        pub copied: &'static str,
        pub error: &'static dyn Template___error_str,
    }

    #[derive(Debug)]
    pub struct ConfirmDiscard {
        pub title: &'static str,
        pub exit: &'static str,
        pub open_another_file: &'static str,
        pub reset_puzzle: &'static str,
        pub scramble: &'static str,
    }

    #[derive(Debug)]
    pub struct Presets {
        pub save_changes: &'static str,
        pub create_current: &'static dyn Template___current_str,
        pub overwrite_current: &'static dyn Template___current_str,
        pub default: PresetStrings,
        pub animation_settings: PresetStrings,
        pub view_settings: PresetStrings,
        pub piece_filters: PresetStrings,
        pub piece_filter_sequences: PresetStrings,
        pub color_schemes: PresetStrings,
        pub custom_styles: PresetStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_Animations_Twists_Interpolations_Alignments {
        pub true_neutral: &'static str,
        pub neutral_good: &'static str,
        pub neutral_evil: &'static str,
        pub lawful_neutral: &'static str,
        pub lawful_good: &'static str,
        pub lawful_evil: &'static str,
        pub chaotic_neutral: &'static str,
        pub chaotic_good: &'static str,
        pub chaotic_evil: &'static str,
        pub eldritch: &'static str,
    }

    #[derive(Debug)]
    pub struct Prefs_Animations_Twists_Interpolations {
        pub lerp: HoverStrings,
        pub cosine: HoverStrings,
        pub cubic: HoverStrings,
        pub circular: HoverStrings,
        pub bounce: HoverStrings,
        pub overshoot: HoverStrings,
        pub underdamped: HoverStrings,
        pub critically_damped: HoverStrings,
        pub critically_dried: HoverStrings,
        pub random: HoverStrings,
        pub alignment: &'static dyn Template___alignment_str,
        pub alignments: Prefs_Animations_Twists_Interpolations_Alignments,
    }

    #[derive(Debug)]
    pub struct Prefs_Animations_Twists {
        pub title: &'static str,
        pub dynamic_twist_speed: HoverStrings,
        pub twist_duration: HoverStrings,
        pub twist_interpolation: HoverStrings,
        pub interpolations: Prefs_Animations_Twists_Interpolations,
    }

    #[derive(Debug)]
    pub struct Prefs_Animations_Other {
        pub title: &'static str,
        pub blocking_animation_duration: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_Animations {
        pub twists: Prefs_Animations_Twists,
        pub other: Prefs_Animations_Other,
    }

    #[derive(Debug)]
    pub struct Prefs_Interaction_Dialogs {
        pub title: &'static str,
        pub confirm_discard_only_when_scrambled: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_Interaction_Reorientation {
        pub title: &'static str,
        pub drag_sensitivity: HoverStrings,
        pub realign_puzzle_on_release: HoverStrings,
        pub realign_puzzle_on_keypress: HoverStrings,
        pub smart_realign: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_Interaction_Ui {
        pub title: &'static str,
        pub middle_click_delete: HoverStrings,
        pub reverse_filter_rules: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_Interaction {
        pub title: &'static str,
        pub dialogs: Prefs_Interaction_Dialogs,
        pub reorientation: Prefs_Interaction_Reorientation,
        pub ui: Prefs_Interaction_Ui,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Projection_Fov3d {
        pub label: &'static str,
        pub quake_pro: &'static str,
        pub orp_ekauq: &'static str,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Projection {
        pub title: &'static str,
        pub fov_4d: HoverStrings,
        pub fov_3d: Prefs_View_Projection_Fov3d,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Geometry {
        pub title: &'static str,
        pub show_frontfaces: HoverStrings,
        pub show_backfaces: HoverStrings,
        pub show_behind_4d_camera: HoverStrings,
        pub show_internals: HoverStrings,
        pub gizmo_scale: HoverStrings,
        pub facet_shrink: HoverStrings,
        pub sticker_shrink: HoverStrings,
        pub piece_explode: HoverStrings,
        pub disabled_when_showing_internals: &'static str,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Lighting_Intensity {
        pub faces: HoverStrings,
        pub outlines: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Lighting {
        pub title: &'static str,
        pub pitch: HoverStrings,
        pub yaw: HoverStrings,
        pub intensity: Prefs_View_Lighting_Intensity,
    }

    #[derive(Debug)]
    pub struct Prefs_View_Performance {
        pub title: &'static str,
        pub downscale_factor: HoverStrings,
        pub downscale_interpolation: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Prefs_View {
        pub projection: Prefs_View_Projection,
        pub geometry: Prefs_View_Geometry,
        pub lighting: Prefs_View_Lighting,
        pub performance: Prefs_View_Performance,
    }

    #[derive(Debug)]
    pub struct Prefs {
        pub animations: Prefs_Animations,
        pub interaction: Prefs_Interaction,
        pub view: Prefs_View,
    }

    #[derive(Debug)]
    pub struct Colors_Misc {
        pub title: &'static str,
        pub dark_background: HoverStrings,
        pub light_background: HoverStrings,
        pub internal_faces: HoverStrings,
        pub blocking_pieces_outlines: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Colors_Actions {
        pub add: &'static str,
        pub rename: &'static str,
        pub delete: &'static str,
        pub sort: &'static str,
        pub sort_by_name: &'static str,
        pub sort_by_lightness: &'static str,
        pub sort_by_count: &'static str,
        pub sort_by_color: &'static str,
    }

    #[derive(Debug)]
    pub struct Colors_Errors {
        pub empty_name: &'static str,
        pub name_conflict: &'static str,
    }

    #[derive(Debug)]
    pub struct Colors_SetSizes {
        pub _1: &'static str,
        pub _2: &'static str,
        pub _3: &'static str,
        pub _4: &'static str,
        pub _5: &'static str,
        pub _6: &'static str,
        pub _7: &'static str,
        pub _8: &'static str,
        pub _9: &'static str,
        pub _10: &'static str,
        pub n: &'static dyn Template___n_str,
    }

    #[derive(Debug)]
    pub struct Colors {
        pub color_schemes: &'static str,
        pub global_palette: &'static str,
        pub singles: &'static str,
        pub gradients: &'static str,
        pub custom: &'static str,
        pub builtin: &'static str,
        pub builtin_sets: &'static str,
        pub misc: Colors_Misc,
        pub actions: Colors_Actions,
        pub errors: Colors_Errors,
        pub builtin_gradient: &'static str,
        pub puzzle_color_popup_title: &'static dyn Template___puzzle_color_str,
        pub warning_save_changes: &'static str,
        pub set_sizes: Colors_SetSizes,
    }

    #[derive(Debug)]
    pub struct Styles_Misc_Background {
        pub title: &'static str,
        pub dark_mode: HoverStrings,
        pub light_mode: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Styles_Misc_Internals {
        pub title: &'static str,
        pub face_color: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Styles_Misc_BlockingPieces {
        pub title: &'static str,
        pub outlines_color: HoverStrings,
        pub outlines_size: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Styles_Misc {
        pub title: &'static str,
        pub background: Styles_Misc_Background,
        pub internals: Styles_Misc_Internals,
        pub blocking_pieces: Styles_Misc_BlockingPieces,
    }

    #[derive(Debug)]
    pub struct Styles_Builtin {
        pub title: &'static str,
        pub default: &'static str,
        pub gripped: &'static str,
        pub ungripped: &'static str,
        pub hovered: &'static str,
        pub selected: &'static str,
        pub blindfolded: &'static str,
    }

    #[derive(Debug)]
    pub struct Styles_Custom {
        pub sticker_faces: &'static str,
        pub sticker_outlines: &'static str,
        pub interactable: HoverStrings,
        pub opacity: HoverStrings,
        pub outline_size: HoverStrings,
        pub lighting: HoverStrings,
    }

    #[derive(Debug)]
    pub struct Styles_ColorMode {
        pub default: &'static str,
        pub sticker: &'static str,
        pub fixed: &'static str,
        pub rainbow: &'static str,
    }

    #[derive(Debug)]
    pub struct Styles_ColorModeReset {
        pub default: &'static str,
        pub sticker: &'static str,
        pub fixed: &'static dyn Template___color_str,
        pub rainbow: &'static str,
    }

    #[derive(Debug)]
    pub struct Styles {
        pub misc: Styles_Misc,
        pub builtin: Styles_Builtin,
        pub custom: Styles_Custom,
        pub color_mode: Styles_ColorMode,
        pub color_mode_reset: Styles_ColorModeReset,
    }

    #[derive(Debug)]
    pub struct Camera {
        pub reset: &'static str,
        pub w_axis_hint: &'static dyn Template___modifier_str,
        pub v_axis_hint: &'static dyn Template___modifier_str,
    }

    #[derive(Debug)]
    pub struct Debug {
        pub _disabled: &'static str,
    }

    #[derive(Debug)]
    pub struct Dev_Logs {
        pub clear: &'static str,
        pub filter: &'static str,
    }

    #[derive(Debug)]
    pub struct Dev {
        pub hover_info: &'static str,
        pub lua_generator: &'static str,
        pub linter: &'static str,
        pub logs: Dev_Logs,
    }

    #[derive(Debug)]
    pub struct ImageGenerator_Errors {
        pub no_output_dir: &'static str,
        pub no_output_filename: &'static str,
        pub no_active_puzzle: &'static str,
    }

    #[derive(Debug)]
    pub struct ImageGenerator {
        pub save_image: &'static str,
        pub errors: ImageGenerator_Errors,
        pub already_exists_confirm: &'static str,
        pub browse: &'static str,
        pub select_output_dir: &'static str,
    }

    #[derive(Debug)]
    pub struct Catalog {
        pub refresh: &'static str,
        pub filter_by_tag: &'static str,
        pub generate_puzzle: &'static str,
    }

    #[derive(Debug)]
    pub struct PieceFilters_Tabs {
        pub ad_hoc: &'static str,
        pub presets_list: &'static str,
        pub edit_presets: &'static str,
    }

    #[derive(Debug)]
    pub struct PieceFilters {
        pub tabs: PieceFilters_Tabs,
        pub ignore_previous: &'static str,
        pub include_previous: &'static str,
        pub show_n_pieces_with_style: &'static dyn Template___n_str,
        pub show_remaining_peices_with_style: &'static str,
        pub show_remaining_pieces_with_previous_filter: &'static str,
        pub n_match_previous_rule: &'static dyn Template___n_str,
        pub n_override_previous_rule: &'static dyn Template___n_str,
        pub convert_to_text_rule: &'static str,
        pub delete_rule: &'static str,
        pub add_checkboxes_rule: &'static str,
        pub add_text_rule: &'static str,
        pub colors: &'static str,
        pub piece_types: &'static str,
    }

    #[derive(Debug)]
    pub struct PuzzleView {
        pub select_a_puzzle: &'static str,
        pub initializing: &'static str,
        pub generating_spec: &'static str,
        pub building_colors: &'static str,
        pub building_puzzle: &'static str,
        pub finalizing: &'static str,
        pub loading_log: &'static str,
        pub scrambling: &'static str,
    }

    #[derive(Debug)]
    pub struct Help {
        pub custom_piece_styles: &'static str,
        pub color_assignments: &'static dyn Template___color_reassign_mousebind_str___dragging_bool,
        pub global_color_palette: &'static str,
        pub piece_filters: &'static str,
        pub piece_filter_presets: &'static str,
        pub piece_filter_sequences: &'static str,
        pub presets: &'static str,
    }

    #[derive(Debug)]
    pub struct Crash {
        pub _app_crashed: &'static dyn Template___app_str,
        pub _crash_report_saved: &'static dyn Template___loc_str,
        pub _error_saving_crash_report: &'static str,
    }

    #[derive(Debug)]
    pub struct Lang {
        pub tabs: Tabs,
        pub top_bar: TopBar,
        pub menu: Menu,
        pub click_to: ClickTo,
        pub inputs: Inputs,
        pub statuses: Statuses,
        pub confirm_discard: ConfirmDiscard,
        pub reset: &'static str,
        pub reset_to_value: &'static dyn Template___value_str,
        pub no_active_puzzle: &'static str,
        pub edit_as_plaintext: HoverStrings,
        pub presets: Presets,
        pub prefs: Prefs,
        pub colors: Colors,
        pub styles: Styles,
        pub camera: Camera,
        pub _debug: Debug,
        pub dev: Dev,
        pub image_generator: ImageGenerator,
        pub catalog: Catalog,
        pub piece_filters: PieceFilters,
        pub puzzle_view: PuzzleView,
        pub help: Help,
        pub created_by: &'static str,
        pub created_by_url: &'static str,
        pub licensed_under: &'static dyn Template___license_str,
        pub about: &'static dyn Template___author_list_str,
        pub _crash: Crash,
        pub eula: &'static str,
        pub eula_checkbox: &'static str,
    }
}

#[rustfmt::skip]
#[allow(non_camel_case_types, non_upper_case_globals)]
pub mod en {
    use super::structs::*;
    use super::traits::*;

    pub const LANG: Lang = Lang {
        tabs: TABS,
        top_bar: TOP_BAR,
        menu: MENU,
        click_to: CLICK_TO,
        inputs: INPUTS,
        statuses: STATUSES,
        confirm_discard: CONFIRM_DISCARD,
        reset: "Reset",
        reset_to_value: &RESET_TO_VALUE,
        no_active_puzzle: "No active puzzle",
        edit_as_plaintext: EDIT_AS_PLAINTEXT,
        presets: PRESETS,
        prefs: PREFS,
        colors: COLORS,
        styles: STYLES,
        camera: CAMERA,
        _debug: _DEBUG,
        dev: DEV,
        image_generator: IMAGE_GENERATOR,
        catalog: CATALOG,
        piece_filters: PIECE_FILTERS,
        puzzle_view: PUZZLE_VIEW,
        help: HELP,
        created_by: "Created by **Andrew Farkas (HactarCE)**",
        created_by_url: "https://ajfarkas.dev/",
        licensed_under: &LICENSED_UNDER,
        about: &ABOUT,
        _crash: _CRASH,
        eula: "  # Read this before using this software\n\n  This is a **prerelease** version of Hyperspeedcube. All of the following is unstable and subject to change:\n\n  - Lua API for defining puzzles\n  - Built-in puzzles\n  - Log file format (so solves may not be readable using future versions)\n  - Preferences format (so your configuration may be reset without warning)\n\n  Also, the program may crash and lose your progress.\n\n  ---\n\n  You are **encouraged** to do the following:\n\n  - Play with puzzles that are implemented, including developing methods and FMC/speedsolving strategies\n  - Play with the UI and give feedback on it (except for UI that is obviously temporary)\n  - Find and report bugs\n\n  ---\n\n  Please **do not** solve puzzles, because the log files may become unreadable, and we will Soon™ have an automatic leaderboard that solves will be optionally uploaded to.\n\n  We will **NOT** be accepting speedsolves done using a prerelease version of HSC2, for several reasons:\n\n  - Correctness (we don't know if the puzzle simulations and scrambles are correct)\n  - Stability (many things in the program are subject to change)\n  - Equity (not everyone has access to this version of the program)\n  - Logistics (we don't have the manpower to verify leaderboard submissions for so many new puzzles)\n\n  ---",
        eula_checkbox: "I promise I won't use HSC2 for speedsolves until it's officially released (and all the other stuff above)",
    };
    pub const TABS: Tabs = Tabs {
        menu: TABS___MENU,
        titles: TABS___TITLES,
    };
    pub const TOP_BAR: TopBar = TopBar {
        desktop_link: "Download desktop app",
        desktop_link_hover: "  The desktop version of Hyperspeedcube has the same features, but runs faster.",
    };
    pub const MENU: Menu = Menu {
        title: "Menu",
        file: MENU___FILE,
        edit: MENU___EDIT,
        scramble: MENU___SCRAMBLE,
        settings: MENU___SETTINGS,
        tools: MENU___TOOLS,
        puzzles: MENU___PUZZLES,
        help: MENU___HELP,
        debug: MENU___DEBUG,
    };
    pub const CLICK_TO: ClickTo = ClickTo {
        activate: &CLICK_TO___ACTIVATE,
        copy_hex: &CLICK_TO___COPY_HEX,
        delete: &CLICK_TO___DELETE,
        edit: &CLICK_TO___EDIT,
        rename: &CLICK_TO___RENAME,
        rename_or_delete: &CLICK_TO___RENAME_OR_DELETE,
        reorder: &CLICK_TO___REORDER,
    };
    pub const INPUTS: Inputs = Inputs {
        click: "**Click**",
        right_click: "**Right-click**",
        middle_click_or_alt_click: "**Middle-click** or **alt + click**",
        alt_click: "**Alt + click**",
        drag: "**Drag**",
    };
    pub const STATUSES: Statuses = Statuses {
        saved: "Saved!",
        copied: "Copied!",
        error: &STATUSES___ERROR,
    };
    pub const CONFIRM_DISCARD: ConfirmDiscard = ConfirmDiscard {
        title: "Unsaved changes",
        exit: "Discard puzzle state and exit?",
        open_another_file: "Discard puzzle state and open another file?",
        reset_puzzle: "Discard puzzle state and reset puzzle?",
        scramble: "Discard puzzle state and scramble?",
    };
    pub const EDIT_AS_PLAINTEXT: HoverStrings = HoverStrings {
        full: "Edit as plaintext",
        desc: "View and edit settings as plaintext to share them with others.",
        ..HoverStrings::DEFAULT
    };
    pub const PRESETS: Presets = Presets {
        save_changes: "Save changes",
        create_current: &PRESETS___CREATE_CURRENT,
        overwrite_current: &PRESETS___OVERWRITE_CURRENT,
        default: PRESETS___DEFAULT,
        animation_settings: PRESETS___ANIMATION_SETTINGS,
        view_settings: PRESETS___VIEW_SETTINGS,
        piece_filters: PRESETS___PIECE_FILTERS,
        piece_filter_sequences: PRESETS___PIECE_FILTER_SEQUENCES,
        color_schemes: PRESETS___COLOR_SCHEMES,
        custom_styles: PRESETS___CUSTOM_STYLES,
    };
    pub const PREFS: Prefs = Prefs {
        animations: PREFS___ANIMATIONS,
        interaction: PREFS___INTERACTION,
        view: PREFS___VIEW,
    };
    pub const COLORS: Colors = Colors {
        color_schemes: "Color schemes",
        global_palette: "Global color palette",
        singles: "Single colors",
        gradients: "Gradients",
        custom: "Custom colors",
        builtin: "Built-in colors",
        builtin_sets: "Built-in color sets",
        misc: COLORS___MISC,
        actions: COLORS___ACTIONS,
        errors: COLORS___ERRORS,
        builtin_gradient: "Built-in gradient",
        puzzle_color_popup_title: &COLORS___PUZZLE_COLOR_POPUP_TITLE,
        warning_save_changes: "Don't forget to save your changes in the color scheme settings!",
        set_sizes: COLORS___SET_SIZES,
    };
    pub const STYLES: Styles = Styles {
        misc: STYLES___MISC,
        builtin: STYLES___BUILTIN,
        custom: STYLES___CUSTOM,
        color_mode: STYLES___COLOR_MODE,
        color_mode_reset: STYLES___COLOR_MODE_RESET,
    };
    pub const CAMERA: Camera = Camera {
        reset: "Reset camera",
        w_axis_hint: &CAMERA___W_AXIS_HINT,
        v_axis_hint: &CAMERA___V_AXIS_HINT,
    };
    pub const _DEBUG: Debug = Debug {
        _disabled: "Debug info is disabled in release builds",
    };
    pub const DEV: Dev = Dev {
        hover_info: "Hover info",
        lua_generator: "Lua generator",
        linter: "Linter",
        logs: DEV___LOGS,
    };
    pub const IMAGE_GENERATOR: ImageGenerator = ImageGenerator {
        save_image: "Save image",
        errors: IMAGE_GENERATOR___ERRORS,
        already_exists_confirm: "File already exists; click again if you want to overwrite",
        browse: "Browse …",
        select_output_dir: "Select image output directory",
    };
    pub const CATALOG: Catalog = Catalog {
        refresh: "Refresh",
        filter_by_tag: "Filter by tag",
        generate_puzzle: "Generate puzzle",
    };
    pub const PIECE_FILTERS: PieceFilters = PieceFilters {
        tabs: PIECE_FILTERS___TABS,
        ignore_previous: "**Ignore** previous filter",
        include_previous: "**Include** previous filter",
        show_n_pieces_with_style: &PIECE_FILTERS___SHOW_N_PIECES_WITH_STYLE,
        show_remaining_peices_with_style: "Show remaining pieces with style",
        show_remaining_pieces_with_previous_filter: "Show remaining pieces with previous filter",
        n_match_previous_rule: &PIECE_FILTERS___N_MATCH_PREVIOUS_RULE,
        n_override_previous_rule: &PIECE_FILTERS___N_OVERRIDE_PREVIOUS_RULE,
        convert_to_text_rule: "Convert to text rule",
        delete_rule: "Delete rule",
        add_checkboxes_rule: "Add filter rule using checkboxes",
        add_text_rule: "Add filter rule using text",
        colors: "Colors",
        piece_types: "Piece types",
    };
    pub const PUZZLE_VIEW: PuzzleView = PuzzleView {
        select_a_puzzle: "Select a puzzle from the puzzle list",
        initializing: "Initializing",
        generating_spec: "Generating puzzle specification",
        building_colors: "Building color system",
        building_puzzle: "Building puzzle",
        finalizing: "Finalizing puzzle",
        loading_log: "Loading log file",
        scrambling: "Scrambling",
    };
    pub const HELP: Help = Help {
        custom_piece_styles: "  # Custom piece styles\n\n  Custom styles can be applied to pieces using the **piece filters** tool.",
        color_assignments: &HELP___COLOR_ASSIGNMENTS,
        global_color_palette: "  # Global color palette\n\n  The global color palette provides a way to change colors across all puzzles at once.\n\n  For example, you can select a particular shade of red to use on every puzzle with red stickers.\n\n  ## Color sets\n\n  Some colors are organized into sets of colors that are similar but still contrast with each other.\n\n  For example, a puzzle with two different shades of red needs those shades to be distinguishable, so it uses the \"red dyad\" from the global color palette.\n\n  ## Color schemes\n\n  The color scheme for any particular puzzle can be customized in the **color scheme** settings.",
        piece_filters: "  # Piece filters\n\n  TODO: explain filters",
        piece_filter_presets: "  # Piece filter presets\n\n  TODO: explain filter presets",
        piece_filter_sequences: "  # Piece filter sequences\n\n  TODO: explain filter sequences",
        presets: "  # Presets\n\n  A **preset** is a saved set of values that can be loaded at any time.\n\n  - **Click** the `+` button to create a preset\n  - **Click** a preset to activate it\n  - **Right-click** a preset to rename or delete it\n  - **Drag** a preset to reorder it\n\n  Loading a preset discards unsaved changes.",
    };
    pub const _CRASH: Crash = Crash {
        _app_crashed: &_CRASH____APP_CRASHED,
        _crash_report_saved: &_CRASH____CRASH_REPORT_SAVED,
        _error_saving_crash_report: "  Error saving crash report",
    };
    pub const TABS___MENU: Tabs_Menu = Tabs_Menu {
        puzzle: "New puzzle view",
        puzzle_catalog: "Puzzle catalog",
        puzzle_info: "Puzzle info",
        keybinds_reference: "Keybinds reference",
        about: "About",
        colors: "Colors",
        styles: "Styles",
        view: "View",
        animations: "Animations",
        interaction: "Interaction",
        keybinds: "Keybinds",
        mousebinds: "Mousebinds",
        camera: "Camera",
        image_generator: "Image generator",
        macros: "Macros",
        modifier_keys: "Modifier keys",
        move_input: "Move input",
        piece_filters: "Piece filters",
        puzzle_controls: "Puzzle controls",
        scrambler: "Custom scrambler",
        timeline: "Timeline",
        timer: "Timer",
        lua_logs: "Lua logs",
        dev_tools: "Developer tools",
        debug: "Debug output",
    };
    pub const TABS___TITLES: Tabs_Titles = Tabs_Titles {
        puzzle: TABS___TITLES___PUZZLE,
        puzzle_catalog: "Puzzle Catalog",
        puzzle_info: "Puzzle Info",
        keybinds_reference: "Keybinds Reference",
        about: "About",
        colors: "Colors",
        styles: "Styles",
        view: "View",
        animations: "Animations",
        interaction: "Interaction",
        keybinds: "Keybinds",
        mousebinds: "Mousebinds",
        camera: "Camera",
        image_generator: "Image Generator",
        macros: "Macros",
        modifier_keys: "Modifier Keys",
        move_input: "Move Input",
        piece_filters: "Piece Filters",
        puzzle_controls: "Puzzle Controls",
        scrambler: "Scrambles",
        timeline: "Timeline",
        timer: "Timer",
        lua_logs: "Lua Logs",
        dev_tools: "Developer Tools",
        debug: "Debug Output",
    };
    pub const MENU___FILE: Menu_File = Menu_File {
        title: "File",
        open: "Open…",
        open_clipboard: "Open from clipboard",
        save: "Save",
        save_as: "Save as…",
        copy_hsc: "Copy (.hsc)",
        copy_log: "Copy (.log)",
        exit: "Exit",
    };
    pub const MENU___EDIT: Menu_Edit = Menu_Edit {
        title: "Edit",
        undo_twist: "Undo twist",
        redo_twist: "Redo twist",
        reset_puzzle: "Reset puzzle",
    };
    pub const MENU___SCRAMBLE: Menu_Scramble = Menu_Scramble {
        title: "Scramble",
        full: "Full",
        one: "1",
        two: "2",
    };
    pub const MENU___SETTINGS: Menu_Settings = Menu_Settings {
        title: "Settings",
    };
    pub const MENU___TOOLS: Menu_Tools = Menu_Tools {
        title: "Tools",
    };
    pub const MENU___PUZZLES: Menu_Puzzles = Menu_Puzzles {
        title: "Puzzles",
        custom: "Custom puzzles",
        show_lua_dir: "Show Lua directory",
        extract_lua: "Extra built-in Lua files…",
        show_experimental: "Show experimental puzzles",
    };
    pub const MENU___HELP: Menu_Help = Menu_Help {
        title: "Help",
        guides: "Guides",
    };
    pub const MENU___DEBUG: Menu_Debug = Menu_Debug {
        title: "Debug",
    };
    pub const PRESETS___DEFAULT: PresetStrings = PresetStrings {
        saved_presets: "Saved presets",
        current: &PRESETS___DEFAULT___CURRENT,
        current_empty: "No preset",
        new_name_hint: "New preset name",
        errors: PRESETS___DEFAULT___ERRORS,
        actions: PRESETS___DEFAULT___ACTIONS,
    };
    pub const PRESETS___ANIMATION_SETTINGS: PresetStrings = PresetStrings {
        current: &PRESETS___ANIMATION_SETTINGS___CURRENT,
        current_empty: "No animation settings",
        errors: PRESETS___ANIMATION_SETTINGS___ERRORS,
        actions: PRESETS___ANIMATION_SETTINGS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    pub const PRESETS___VIEW_SETTINGS: PresetStrings = PresetStrings {
        current: &PRESETS___VIEW_SETTINGS___CURRENT,
        current_empty: "No view settings",
        errors: PRESETS___VIEW_SETTINGS___ERRORS,
        actions: PRESETS___VIEW_SETTINGS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    pub const PRESETS___PIECE_FILTERS: PresetStrings = PresetStrings {
        saved_presets: "Filter presets",
        current: &PRESETS___PIECE_FILTERS___CURRENT,
        current_empty: "Ad-hoc piece filters",
        errors: PRESETS___PIECE_FILTERS___ERRORS,
        actions: PRESETS___PIECE_FILTERS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    pub const PRESETS___PIECE_FILTER_SEQUENCES: PresetStrings = PresetStrings {
        saved_presets: "Filter sequences",
        errors: PRESETS___PIECE_FILTER_SEQUENCES___ERRORS,
        actions: PRESETS___PIECE_FILTER_SEQUENCES___ACTIONS,
        ..PRESETS___DEFAULT
    };
    pub const PRESETS___COLOR_SCHEMES: PresetStrings = PresetStrings {
        saved_presets: "Saved color schemes",
        current: &PRESETS___COLOR_SCHEMES___CURRENT,
        current_empty: "No color scheme",
        new_name_hint: "New color scheme name",
        errors: PRESETS___COLOR_SCHEMES___ERRORS,
        actions: PRESETS___COLOR_SCHEMES___ACTIONS,
    };
    pub const PRESETS___CUSTOM_STYLES: PresetStrings = PresetStrings {
        saved_presets: "Custom styles",
        current: &PRESETS___CUSTOM_STYLES___CURRENT,
        current_empty: "No style",
        new_name_hint: "New style name",
        errors: PRESETS___CUSTOM_STYLES___ERRORS,
        actions: PRESETS___CUSTOM_STYLES___ACTIONS,
    };
    pub const PREFS___ANIMATIONS: Prefs_Animations = Prefs_Animations {
        twists: PREFS___ANIMATIONS___TWISTS,
        other: PREFS___ANIMATIONS___OTHER,
    };
    pub const PREFS___INTERACTION: Prefs_Interaction = Prefs_Interaction {
        title: "Interaction settings",
        dialogs: PREFS___INTERACTION___DIALOGS,
        reorientation: PREFS___INTERACTION___REORIENTATION,
        ui: PREFS___INTERACTION___UI,
    };
    pub const PREFS___VIEW: Prefs_View = Prefs_View {
        projection: PREFS___VIEW___PROJECTION,
        geometry: PREFS___VIEW___GEOMETRY,
        lighting: PREFS___VIEW___LIGHTING,
        performance: PREFS___VIEW___PERFORMANCE,
    };
    pub const COLORS___MISC: Colors_Misc = Colors_Misc {
        title: "Miscellaneous colors",
        dark_background: COLORS___MISC___DARK_BACKGROUND,
        light_background: COLORS___MISC___LIGHT_BACKGROUND,
        internal_faces: COLORS___MISC___INTERNAL_FACES,
        blocking_pieces_outlines: COLORS___MISC___BLOCKING_PIECES_OUTLINES,
    };
    pub const COLORS___ACTIONS: Colors_Actions = Colors_Actions {
        add: "Add color",
        rename: "Rename color",
        delete: "Delete color",
        sort: "Sort colors",
        sort_by_name: "Sort by name",
        sort_by_lightness: "Sort by lightness (Oklab)",
        sort_by_count: "Sort by count",
        sort_by_color: "Sort by color",
    };
    pub const COLORS___ERRORS: Colors_Errors = Colors_Errors {
        empty_name: "Color name cannot be empty",
        name_conflict: "There is already a color with this name",
    };
    pub const COLORS___SET_SIZES: Colors_SetSizes = Colors_SetSizes {
        _1: "Monads",
        _2: "Dyads",
        _3: "Triads",
        _4: "Tetrads",
        _5: "Pentads",
        _6: "Hexads",
        _7: "Heptads",
        _8: "Octads",
        _9: "Nonads",
        _10: "Decads",
        n: &COLORS___SET_SIZES___N,
    };
    pub const STYLES___MISC: Styles_Misc = Styles_Misc {
        title: "Miscellaneous styles",
        background: STYLES___MISC___BACKGROUND,
        internals: STYLES___MISC___INTERNALS,
        blocking_pieces: STYLES___MISC___BLOCKING_PIECES,
    };
    pub const STYLES___BUILTIN: Styles_Builtin = Styles_Builtin {
        title: "Built-in style",
        default: "Default",
        gripped: "Gripped",
        ungripped: "Ungripped",
        hovered: "Hovered",
        selected: "Selected",
        blindfolded: "Blindfolded",
    };
    pub const STYLES___CUSTOM: Styles_Custom = Styles_Custom {
        sticker_faces: "Faces",
        sticker_outlines: "Outlines",
        interactable: STYLES___CUSTOM___INTERACTABLE,
        opacity: STYLES___CUSTOM___OPACITY,
        outline_size: STYLES___CUSTOM___OUTLINE_SIZE,
        lighting: STYLES___CUSTOM___LIGHTING,
    };
    pub const STYLES___COLOR_MODE: Styles_ColorMode = Styles_ColorMode {
        default: "Default color",
        sticker: "Sticker color",
        fixed: "Fixed color",
        rainbow: "Gay",
    };
    pub const STYLES___COLOR_MODE_RESET: Styles_ColorModeReset = Styles_ColorModeReset {
        default: "default color",
        sticker: "sticker color",
        fixed: &STYLES___COLOR_MODE_RESET___FIXED,
        rainbow: "gay",
    };
    pub const DEV___LOGS: Dev_Logs = Dev_Logs {
        clear: "Clear logs",
        filter: "Filter:",
    };
    pub const IMAGE_GENERATOR___ERRORS: ImageGenerator_Errors = ImageGenerator_Errors {
        no_output_dir: "No output directory",
        no_output_filename: "No output filename",
        no_active_puzzle: "No active puzzle",
    };
    pub const PIECE_FILTERS___TABS: PieceFilters_Tabs = PieceFilters_Tabs {
        ad_hoc: "Ad-hoc filters",
        presets_list: "Presets list",
        edit_presets: "Edit presets",
    };
    pub const TABS___TITLES___PUZZLE: Tabs_Titles_Puzzle = Tabs_Titles_Puzzle {
        empty: "No Puzzle",
        loading: &TABS___TITLES___PUZZLE___LOADING,
        error: &TABS___TITLES___PUZZLE___ERROR,
    };
    pub const PRESETS___DEFAULT___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Preset name cannot be empty",
        name_conflict: "There is already a preset with this name",
        cannot_delete_last: "Cannot delete last preset",
    };
    pub const PRESETS___DEFAULT___ACTIONS: PresetActions = PresetActions {
        add: "Add preset",
        rename: "Rename preset",
        delete: "Delete preset",
    };
    pub const PRESETS___ANIMATION_SETTINGS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    pub const PRESETS___ANIMATION_SETTINGS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    pub const PRESETS___VIEW_SETTINGS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    pub const PRESETS___VIEW_SETTINGS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    pub const PRESETS___PIECE_FILTERS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    pub const PRESETS___PIECE_FILTERS___ACTIONS: PresetActions = PresetActions {
        add: "Add filter preset",
        rename: "Rename filter preset",
        delete: "Delete filter preset",
    };
    pub const PRESETS___PIECE_FILTER_SEQUENCES___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Filter sequence name cannot be empty",
        name_conflict: "There is already a filter sequence with this name",
        ..PRESETS___DEFAULT___ERRORS
    };
    pub const PRESETS___PIECE_FILTER_SEQUENCES___ACTIONS: PresetActions = PresetActions {
        add: "Add filter sequence",
        rename: "Rename filter sequence",
        delete: "Delete filter sequence",
    };
    pub const PRESETS___COLOR_SCHEMES___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Color scheme name cannot be empty",
        name_conflict: "There is already a color scheme with this name",
        cannot_delete_last: "Cannot delete last color scheme",
    };
    pub const PRESETS___COLOR_SCHEMES___ACTIONS: PresetActions = PresetActions {
        add: "Add color scheme",
        rename: "Rename color scheme",
        delete: "Delete color scheme",
    };
    pub const PRESETS___CUSTOM_STYLES___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Style name cannot be empty",
        name_conflict: "There is already a style with this name",
        cannot_delete_last: "Cannot delete last custom style",
    };
    pub const PRESETS___CUSTOM_STYLES___ACTIONS: PresetActions = PresetActions {
        add: "Add style",
        rename: "Rename style",
        delete: "Delete style",
    };
    pub const PREFS___ANIMATIONS___TWISTS: Prefs_Animations_Twists = Prefs_Animations_Twists {
        title: "Twists",
        dynamic_twist_speed: PREFS___ANIMATIONS___TWISTS___DYNAMIC_TWIST_SPEED,
        twist_duration: PREFS___ANIMATIONS___TWISTS___TWIST_DURATION,
        twist_interpolation: PREFS___ANIMATIONS___TWISTS___TWIST_INTERPOLATION,
        interpolations: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS,
    };
    pub const PREFS___ANIMATIONS___OTHER: Prefs_Animations_Other = Prefs_Animations_Other {
        title: "Other",
        blocking_animation_duration: PREFS___ANIMATIONS___OTHER___BLOCKING_ANIMATION_DURATION,
    };
    pub const PREFS___INTERACTION___DIALOGS: Prefs_Interaction_Dialogs = Prefs_Interaction_Dialogs {
        title: "Dialogs",
        confirm_discard_only_when_scrambled: PREFS___INTERACTION___DIALOGS___CONFIRM_DISCARD_ONLY_WHEN_SCRAMBLED,
    };
    pub const PREFS___INTERACTION___REORIENTATION: Prefs_Interaction_Reorientation = Prefs_Interaction_Reorientation {
        title: "Reorientation",
        drag_sensitivity: PREFS___INTERACTION___REORIENTATION___DRAG_SENSITIVITY,
        realign_puzzle_on_release: PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_RELEASE,
        realign_puzzle_on_keypress: PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_KEYPRESS,
        smart_realign: PREFS___INTERACTION___REORIENTATION___SMART_REALIGN,
    };
    pub const PREFS___INTERACTION___UI: Prefs_Interaction_Ui = Prefs_Interaction_Ui {
        title: "Preferences UI",
        middle_click_delete: PREFS___INTERACTION___UI___MIDDLE_CLICK_DELETE,
        reverse_filter_rules: PREFS___INTERACTION___UI___REVERSE_FILTER_RULES,
    };
    pub const PREFS___VIEW___PROJECTION: Prefs_View_Projection = Prefs_View_Projection {
        title: "Projection",
        fov_4d: PREFS___VIEW___PROJECTION___FOV_4D,
        fov_3d: PREFS___VIEW___PROJECTION___FOV_3D,
    };
    pub const PREFS___VIEW___GEOMETRY: Prefs_View_Geometry = Prefs_View_Geometry {
        title: "Geometry",
        show_frontfaces: PREFS___VIEW___GEOMETRY___SHOW_FRONTFACES,
        show_backfaces: PREFS___VIEW___GEOMETRY___SHOW_BACKFACES,
        show_behind_4d_camera: PREFS___VIEW___GEOMETRY___SHOW_BEHIND_4D_CAMERA,
        show_internals: PREFS___VIEW___GEOMETRY___SHOW_INTERNALS,
        gizmo_scale: PREFS___VIEW___GEOMETRY___GIZMO_SCALE,
        facet_shrink: PREFS___VIEW___GEOMETRY___FACET_SHRINK,
        sticker_shrink: PREFS___VIEW___GEOMETRY___STICKER_SHRINK,
        piece_explode: PREFS___VIEW___GEOMETRY___PIECE_EXPLODE,
        disabled_when_showing_internals: "Disabled when showing internals",
    };
    pub const PREFS___VIEW___LIGHTING: Prefs_View_Lighting = Prefs_View_Lighting {
        title: "Lighting",
        pitch: PREFS___VIEW___LIGHTING___PITCH,
        yaw: PREFS___VIEW___LIGHTING___YAW,
        intensity: PREFS___VIEW___LIGHTING___INTENSITY,
    };
    pub const PREFS___VIEW___PERFORMANCE: Prefs_View_Performance = Prefs_View_Performance {
        title: "Performance",
        downscale_factor: PREFS___VIEW___PERFORMANCE___DOWNSCALE_FACTOR,
        downscale_interpolation: PREFS___VIEW___PERFORMANCE___DOWNSCALE_INTERPOLATION,
    };
    pub const COLORS___MISC___DARK_BACKGROUND: HoverStrings = HoverStrings {
        label: "Background (dark mode)",
        ..HoverStrings::DEFAULT
    };
    pub const COLORS___MISC___LIGHT_BACKGROUND: HoverStrings = HoverStrings {
        label: "Background (light mode)",
        ..HoverStrings::DEFAULT
    };
    pub const COLORS___MISC___INTERNAL_FACES: HoverStrings = HoverStrings {
        label: "Internal faces",
        ..HoverStrings::DEFAULT
    };
    pub const COLORS___MISC___BLOCKING_PIECES_OUTLINES: HoverStrings = HoverStrings {
        label: "Blocking pieces outlines",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___MISC___BACKGROUND: Styles_Misc_Background = Styles_Misc_Background {
        title: "Background",
        dark_mode: STYLES___MISC___BACKGROUND___DARK_MODE,
        light_mode: STYLES___MISC___BACKGROUND___LIGHT_MODE,
    };
    pub const STYLES___MISC___INTERNALS: Styles_Misc_Internals = Styles_Misc_Internals {
        title: "Internals",
        face_color: STYLES___MISC___INTERNALS___FACE_COLOR,
    };
    pub const STYLES___MISC___BLOCKING_PIECES: Styles_Misc_BlockingPieces = Styles_Misc_BlockingPieces {
        title: "Blocking pieces",
        outlines_color: STYLES___MISC___BLOCKING_PIECES___OUTLINES_COLOR,
        outlines_size: STYLES___MISC___BLOCKING_PIECES___OUTLINES_SIZE,
    };
    pub const STYLES___CUSTOM___INTERACTABLE: HoverStrings = HoverStrings {
        label: "Interactable",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___CUSTOM___OPACITY: HoverStrings = HoverStrings {
        label: "Opacity",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___CUSTOM___OUTLINE_SIZE: HoverStrings = HoverStrings {
        label: "Size",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___CUSTOM___LIGHTING: HoverStrings = HoverStrings {
        label: "Lighting",
        desc: "Lighting intensity can be configured in the **view settings**.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___DYNAMIC_TWIST_SPEED: HoverStrings = HoverStrings {
        label: "Dynamic twist speed",
        desc: "  When enabled, the puzzle twists faster when many moves are queued up. When all queued moves are complete, the twist speed resets.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___TWIST_DURATION: HoverStrings = HoverStrings {
        label: "Twist duration",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___TWIST_INTERPOLATION: HoverStrings = HoverStrings {
        label: "Twist interpolation",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS: Prefs_Animations_Twists_Interpolations = Prefs_Animations_Twists_Interpolations {
        lerp: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___LERP,
        cosine: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___COSINE,
        cubic: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CUBIC,
        circular: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CIRCULAR,
        bounce: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___BOUNCE,
        overshoot: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___OVERSHOOT,
        underdamped: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___UNDERDAMPED,
        critically_damped: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CRITICALLY_DAMPED,
        critically_dried: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CRITICALLY_DRIED,
        random: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___RANDOM,
        alignment: &PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___ALIGNMENT,
        alignments: PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___ALIGNMENTS,
    };
    pub const PREFS___ANIMATIONS___OTHER___BLOCKING_ANIMATION_DURATION: HoverStrings = HoverStrings {
        label: "Blocking animation duration",
        desc: "  Duration of the animation when a piece is blocking a twist.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___DIALOGS___CONFIRM_DISCARD_ONLY_WHEN_SCRAMBLED: HoverStrings = HoverStrings {
        label: "Confirm discard only when scrambled",
        desc: "  When enabled, a confirmation dialog before destructive actions (like resetting the puzzle)is only shown when the puzzle has been fully scrambled.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___REORIENTATION___DRAG_SENSITIVITY: HoverStrings = HoverStrings {
        label: "Drag sensitivity",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_RELEASE: HoverStrings = HoverStrings {
        label: "Realign puzzle on release",
        desc: "  When enabled, the puzzle snaps back immediately when the mouse is released after dragging to rotate it.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_KEYPRESS: HoverStrings = HoverStrings {
        label: "Realign puzzle on keypress",
        desc: "  When enabled, the puzzle snaps back immediately when the keyboard is used to grip or do a move.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___REORIENTATION___SMART_REALIGN: HoverStrings = HoverStrings {
        label: "Smart realign",
        desc: "  When enabled, the puzzle snaps to the nearest similar orientation, not the original. This adds a full-puzzle rotation to the undo history.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___UI___MIDDLE_CLICK_DELETE: HoverStrings = HoverStrings {
        label: "Middle click to delete",
        desc: "  When enabled, **middle-click** on some UI elements (presets, custom colors, etc.) to delete them. **Alt+click** always works.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___INTERACTION___UI___REVERSE_FILTER_RULES: HoverStrings = HoverStrings {
        label: "Reverse filter rules",
        desc: "  When **disabled**, piece filter rules are listed in order from **highest to lowest** priority, so **earlier rules override later ones**.\n\n  When **enabled**, piece filter rules are listed in order from **lowest to highest** priority, so **later rules override earlier ones**.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___PROJECTION___FOV_4D: HoverStrings = HoverStrings {
        label: "4D FOV",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___PROJECTION___FOV_3D: Prefs_View_Projection_Fov3d = Prefs_View_Projection_Fov3d {
        label: "3D FOV",
        quake_pro: "QUAKE PRO",
        orp_ekauq: "ORP EKAUQ",
    };
    pub const PREFS___VIEW___GEOMETRY___SHOW_FRONTFACES: HoverStrings = HoverStrings {
        label: "Show frontfaces",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___SHOW_BACKFACES: HoverStrings = HoverStrings {
        label: "Show backfaces",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___SHOW_BEHIND_4D_CAMERA: HoverStrings = HoverStrings {
        label: "Show behind 4D camera",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___SHOW_INTERNALS: HoverStrings = HoverStrings {
        label: "Show internals",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___GIZMO_SCALE: HoverStrings = HoverStrings {
        label: "Gizmo scale",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___FACET_SHRINK: HoverStrings = HoverStrings {
        label: "Facet shrink",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___STICKER_SHRINK: HoverStrings = HoverStrings {
        label: "Sticker shrink",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___GEOMETRY___PIECE_EXPLODE: HoverStrings = HoverStrings {
        label: "Piece explode",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___LIGHTING___PITCH: HoverStrings = HoverStrings {
        label: "Pitch",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___LIGHTING___YAW: HoverStrings = HoverStrings {
        label: "Yaw",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___LIGHTING___INTENSITY: Prefs_View_Lighting_Intensity = Prefs_View_Lighting_Intensity {
        faces: PREFS___VIEW___LIGHTING___INTENSITY___FACES,
        outlines: PREFS___VIEW___LIGHTING___INTENSITY___OUTLINES,
    };
    pub const PREFS___VIEW___PERFORMANCE___DOWNSCALE_FACTOR: HoverStrings = HoverStrings {
        label: "Downscale factor",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___PERFORMANCE___DOWNSCALE_INTERPOLATION: HoverStrings = HoverStrings {
        label: "Downscale interpolation",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___MISC___BACKGROUND___DARK_MODE: HoverStrings = HoverStrings {
        label: "Dark mode",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___MISC___BACKGROUND___LIGHT_MODE: HoverStrings = HoverStrings {
        label: "Light mode",
        ..HoverStrings::DEFAULT
    };
    pub const STYLES___MISC___INTERNALS___FACE_COLOR: HoverStrings = HoverStrings {
        label: "Face color",
        full: "Internal faces color",
        desc: "  For 3D puzzles, it's sometimes possible to view the internal faces of pieces, particularly mid-turn or using **piece explode**. You can configure whether internal faces are visible in **view settings**.",
    };
    pub const STYLES___MISC___BLOCKING_PIECES___OUTLINES_COLOR: HoverStrings = HoverStrings {
        label: "Outlines color",
        full: "Blocking pieces outlines color",
        desc: "  Outline color for pieces blocking a move. This is only visible for puzzles that bandage.",
    };
    pub const STYLES___MISC___BLOCKING_PIECES___OUTLINES_SIZE: HoverStrings = HoverStrings {
        label: "Outlines size",
        full: "Blocking pieces outlines size",
        desc: "  Outline size for pieces blocking a move. This is only visible for puzzles that bandage.",
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___LERP: HoverStrings = HoverStrings {
        label: "Linear",
        desc: "  The speed throughout a turn is constant, with no easing.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___COSINE: HoverStrings = HoverStrings {
        label: "Cosine",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CUBIC: HoverStrings = HoverStrings {
        label: "Cubic",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CIRCULAR: HoverStrings = HoverStrings {
        label: "Circular",
        desc: "  Two quarter circles, with a single point of infinite speed at the halfway point.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___BOUNCE: HoverStrings = HoverStrings {
        label: "Bounce",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___OVERSHOOT: HoverStrings = HoverStrings {
        label: "Overshoot",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___UNDERDAMPED: HoverStrings = HoverStrings {
        label: "Underdamped",
        desc: "  Simulates a weakly damped harmonic oscillator.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CRITICALLY_DAMPED: HoverStrings = HoverStrings {
        label: "Critically damped",
        desc: "  Simulates a damped harmonic oscillator with a damping force such that the animation completes as quickly as possible without overshooting.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___CRITICALLY_DRIED: HoverStrings = HoverStrings {
        label: "Critically dried",
        desc: "  Same as critically damped, but reversed.",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___RANDOM: HoverStrings = HoverStrings {
        label: "Random",
        desc: "  Why?",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___ALIGNMENTS: Prefs_Animations_Twists_Interpolations_Alignments = Prefs_Animations_Twists_Interpolations_Alignments {
        true_neutral: "True Neutral",
        neutral_good: "Neutral Good",
        neutral_evil: "Neutral Evil",
        lawful_neutral: "Lawful Neutral",
        lawful_good: "Lawful Good",
        lawful_evil: "Lawful Evil",
        chaotic_neutral: "Chaotic Neutral",
        chaotic_good: "Chaotic Good",
        chaotic_evil: "Chaotic Evil",
        eldritch: "Eldritch",
    };
    pub const PREFS___VIEW___LIGHTING___INTENSITY___FACES: HoverStrings = HoverStrings {
        label: "Intensity (faces)",
        ..HoverStrings::DEFAULT
    };
    pub const PREFS___VIEW___LIGHTING___INTENSITY___OUTLINES: HoverStrings = HoverStrings {
        label: "Intensity (outlines)",
        desc: "  This is also enabled or disabled for each style in the style settings. For dark outline colors, it may have little or no effect.",
        ..HoverStrings::DEFAULT
    };
    const RESET_TO_VALUE: ResetToValue = ResetToValue;
    #[derive(Debug, Default, Copy, Clone)]
    struct ResetToValue;
    impl Template___value_str for ResetToValue {
        fn with(
            &self,
            value: &str,
        ) -> String {
            String::new()
                + "Reset to "
                + value
                + ""
        }
    }
    const LICENSED_UNDER: LicensedUnder = LicensedUnder;
    #[derive(Debug, Default, Copy, Clone)]
    struct LicensedUnder;
    impl Template___license_str for LicensedUnder {
        fn with(
            &self,
            license: &str,
        ) -> String {
            String::new()
                + "Licensed under **"
                + license
                + "**"
        }
    }
    const ABOUT: About = About;
    #[derive(Debug, Default, Copy, Clone)]
    struct About;
    impl Template___author_list_str for About {
        fn with(
            &self,
            author_list: &str,
        ) -> String {
            String::new()
                + "  Dedicated to **Andrey Astrelin**\n\n  ## Acknowledgements\n\n  **Edan Maor**, **Rowan Fortier**, **Melody Griesen**, and **Sam Boxdorfer**  \n  _for supporting me on Ko-fi during development_\n\n  **Luna Harran**  \n  _for her incessant whining that inspired this program, and for her extensive puzzle knowledge and geometric insight that made it possible_\n\n  **Milo Jacquet**  \n  _for his many contributions to the design of the puzzle definition API, and for developing the leaderboard server_\n\n  **Andreas Thompson**  \n  _for designing the piece filters UI_\n\n  **Alan Everett (thatcomputerguy0101), Raymond Zhao (rzhao271)**  \n  _for various bugfixes_\n\n  **My friends**  \n  _for putting up with my rants about tangent points at infinity_\n\n  **The Hypercubers Discord server**  \n  _for their endless patience and for keeping me company in voice chat over several years_\n\n  ## Other twisty puzzle software\n\n  Algorithms and inspiration taken from these programs:\n\n  - [Magic Puzzle Ultimate](https://superliminal.com/andrey/mpu/) by Andrey Astrelin\n  - [Magic Cube 4D](https://superliminal.com/cube/) by Melinda Green, Don Hatch, and others\n  - [pCubes](http://twistypuzzles.com/forum/viewtopic.php?f=1&t=27054) by Boris\n  - [Virtual Magic Polyhedra](https://github.com/Hypercubers/gelatinbrain) by gelatinbrain\n\n  ## Puzzle definition authors\n\n  "
                + author_list
                + ""
        }
    }
    const CLICK_TO___ACTIVATE: ClickTo_Activate = ClickTo_Activate;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_Activate;
    impl Template___click_str for ClickTo_Activate {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to activate"
        }
    }
    const CLICK_TO___COPY_HEX: ClickTo_CopyHex = ClickTo_CopyHex;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_CopyHex;
    impl Template___click_str for ClickTo_CopyHex {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to copy hex"
        }
    }
    const CLICK_TO___DELETE: ClickTo_Delete = ClickTo_Delete;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_Delete;
    impl Template___click_str for ClickTo_Delete {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to delete"
        }
    }
    const CLICK_TO___EDIT: ClickTo_Edit = ClickTo_Edit;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_Edit;
    impl Template___click_str for ClickTo_Edit {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to edit"
        }
    }
    const CLICK_TO___RENAME: ClickTo_Rename = ClickTo_Rename;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_Rename;
    impl Template___click_str for ClickTo_Rename {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to rename"
        }
    }
    const CLICK_TO___RENAME_OR_DELETE: ClickTo_RenameOrDelete = ClickTo_RenameOrDelete;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_RenameOrDelete;
    impl Template___click_str for ClickTo_RenameOrDelete {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to rename or delete"
        }
    }
    const CLICK_TO___REORDER: ClickTo_Reorder = ClickTo_Reorder;
    #[derive(Debug, Default, Copy, Clone)]
    struct ClickTo_Reorder;
    impl Template___click_str for ClickTo_Reorder {
        fn with(
            &self,
            click: &str,
        ) -> String {
            String::new()
                + ""
                + click
                + " to reorder"
        }
    }
    const STATUSES___ERROR: Statuses_Error = Statuses_Error;
    #[derive(Debug, Default, Copy, Clone)]
    struct Statuses_Error;
    impl Template___error_str for Statuses_Error {
        fn with(
            &self,
            error: &str,
        ) -> String {
            String::new()
                + "Error: "
                + error
                + ""
        }
    }
    const PRESETS___CREATE_CURRENT: Presets_CreateCurrent = Presets_CreateCurrent;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_CreateCurrent;
    impl Template___current_str for Presets_CreateCurrent {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + "Create "
                + current
                + ""
        }
    }
    const PRESETS___OVERWRITE_CURRENT: Presets_OverwriteCurrent = Presets_OverwriteCurrent;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_OverwriteCurrent;
    impl Template___current_str for Presets_OverwriteCurrent {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + "Overwrite "
                + current
                + ""
        }
    }
    const COLORS___PUZZLE_COLOR_POPUP_TITLE: Colors_PuzzleColorPopupTitle = Colors_PuzzleColorPopupTitle;
    #[derive(Debug, Default, Copy, Clone)]
    struct Colors_PuzzleColorPopupTitle;
    impl Template___puzzle_color_str for Colors_PuzzleColorPopupTitle {
        fn with(
            &self,
            puzzle_color: &str,
        ) -> String {
            String::new()
                + ""
                + puzzle_color
                + " color"
        }
    }
    const CAMERA___W_AXIS_HINT: Camera_WAxisHint = Camera_WAxisHint;
    #[derive(Debug, Default, Copy, Clone)]
    struct Camera_WAxisHint;
    impl Template___modifier_str for Camera_WAxisHint {
        fn with(
            &self,
            modifier: &str,
        ) -> String {
            String::new()
                + "Hold "
                + modifier
                + " to rotate through W axis"
        }
    }
    const CAMERA___V_AXIS_HINT: Camera_VAxisHint = Camera_VAxisHint;
    #[derive(Debug, Default, Copy, Clone)]
    struct Camera_VAxisHint;
    impl Template___modifier_str for Camera_VAxisHint {
        fn with(
            &self,
            modifier: &str,
        ) -> String {
            String::new()
                + "Hold "
                + modifier
                + " to rotate through V axis"
        }
    }
    const PIECE_FILTERS___SHOW_N_PIECES_WITH_STYLE: PieceFilters_ShowNPiecesWithStyle = PieceFilters_ShowNPiecesWithStyle;
    #[derive(Debug, Default, Copy, Clone)]
    struct PieceFilters_ShowNPiecesWithStyle;
    impl Template___n_str for PieceFilters_ShowNPiecesWithStyle {
        fn with(
            &self,
            n: &str,
        ) -> String {
            String::new()
                + "Show **"
                + n
                + "** pieces with style"
        }
    }
    const PIECE_FILTERS___N_MATCH_PREVIOUS_RULE: PieceFilters_NMatchPreviousRule = PieceFilters_NMatchPreviousRule;
    #[derive(Debug, Default, Copy, Clone)]
    struct PieceFilters_NMatchPreviousRule;
    impl Template___n_str for PieceFilters_NMatchPreviousRule {
        fn with(
            &self,
            n: &str,
        ) -> String {
            String::new()
                + "(**"
                + n
                + "** pieces match a previous rule instead)"
        }
    }
    const PIECE_FILTERS___N_OVERRIDE_PREVIOUS_RULE: PieceFilters_NOverridePreviousRule = PieceFilters_NOverridePreviousRule;
    #[derive(Debug, Default, Copy, Clone)]
    struct PieceFilters_NOverridePreviousRule;
    impl Template___n_str for PieceFilters_NOverridePreviousRule {
        fn with(
            &self,
            n: &str,
        ) -> String {
            String::new()
                + "(**"
                + n
                + "** pieces override a previous rule)"
        }
    }
    const HELP___COLOR_ASSIGNMENTS: Help_ColorAssignments = Help_ColorAssignments;
    #[derive(Debug, Default, Copy, Clone)]
    struct Help_ColorAssignments;
    impl Template___color_reassign_mousebind_str___dragging_bool for Help_ColorAssignments {
        fn with(
            &self,
            color_reassign_mousebind: &str,
            dragging: bool,
        ) -> String {
            String::new()
                + "  # Color assignments\n\n  Each facet on the puzzle is assigned a different color.\n  "
                + if dragging { "\n  Drag a facet name to assign a different color to it.\n  " } else { "" }
                + "\n  In addition to the color scheme settings, you can **"
                + color_reassign_mousebind
                + "** a sticker to change its color assignment.\n\n  - Single colors are best for small puzzles\n  - Color sets are best for medium puzzles\n  - Gradients are best for large puzzles\n  - Colors within a color set are designed to contrast with each other and with other color sets of the same size\n\n  Color values can be customized in the **global color palette** settings."
        }
    }
    const _CRASH____APP_CRASHED: Crash_AppCrashed = Crash_AppCrashed;
    #[derive(Debug, Default, Copy, Clone)]
    struct Crash_AppCrashed;
    impl Template___app_str for Crash_AppCrashed {
        fn with(
            &self,
            app: &str,
        ) -> String {
            String::new()
                + ""
                + app
                + " crashed"
        }
    }
    const _CRASH____CRASH_REPORT_SAVED: Crash_CrashReportSaved = Crash_CrashReportSaved;
    #[derive(Debug, Default, Copy, Clone)]
    struct Crash_CrashReportSaved;
    impl Template___loc_str for Crash_CrashReportSaved {
        fn with(
            &self,
            loc: &str,
        ) -> String {
            String::new()
                + "  A crash report has been saved to \""
                + loc
                + "\"\n\n  Please submit this to the developer"
        }
    }
    const PRESETS___DEFAULT___CURRENT: Presets_Default_Current = Presets_Default_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_Default_Current;
    impl Template___current_str for Presets_Default_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " preset"
        }
    }
    const PRESETS___ANIMATION_SETTINGS___CURRENT: Presets_AnimationSettings_Current = Presets_AnimationSettings_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_AnimationSettings_Current;
    impl Template___current_str for Presets_AnimationSettings_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " animation settings"
        }
    }
    const PRESETS___VIEW_SETTINGS___CURRENT: Presets_ViewSettings_Current = Presets_ViewSettings_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_ViewSettings_Current;
    impl Template___current_str for Presets_ViewSettings_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " view settings"
        }
    }
    const PRESETS___PIECE_FILTERS___CURRENT: Presets_PieceFilters_Current = Presets_PieceFilters_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_PieceFilters_Current;
    impl Template___current_str for Presets_PieceFilters_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " piece filters"
        }
    }
    const PRESETS___COLOR_SCHEMES___CURRENT: Presets_ColorSchemes_Current = Presets_ColorSchemes_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_ColorSchemes_Current;
    impl Template___current_str for Presets_ColorSchemes_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " color scheme"
        }
    }
    const PRESETS___CUSTOM_STYLES___CURRENT: Presets_CustomStyles_Current = Presets_CustomStyles_Current;
    #[derive(Debug, Default, Copy, Clone)]
    struct Presets_CustomStyles_Current;
    impl Template___current_str for Presets_CustomStyles_Current {
        fn with(
            &self,
            current: &str,
        ) -> String {
            String::new()
                + ""
                + current
                + " style"
        }
    }
    const COLORS___SET_SIZES___N: Colors_SetSizes_N = Colors_SetSizes_N;
    #[derive(Debug, Default, Copy, Clone)]
    struct Colors_SetSizes_N;
    impl Template___n_str for Colors_SetSizes_N {
        fn with(
            &self,
            n: &str,
        ) -> String {
            String::new()
                + ""
                + n
                + "-ads"
        }
    }
    const STYLES___COLOR_MODE_RESET___FIXED: Styles_ColorModeReset_Fixed = Styles_ColorModeReset_Fixed;
    #[derive(Debug, Default, Copy, Clone)]
    struct Styles_ColorModeReset_Fixed;
    impl Template___color_str for Styles_ColorModeReset_Fixed {
        fn with(
            &self,
            color: &str,
        ) -> String {
            String::new()
                + "fixed color "
                + color
                + ""
        }
    }
    const TABS___TITLES___PUZZLE___LOADING: Tabs_Titles_Puzzle_Loading = Tabs_Titles_Puzzle_Loading;
    #[derive(Debug, Default, Copy, Clone)]
    struct Tabs_Titles_Puzzle_Loading;
    impl Template___id_str for Tabs_Titles_Puzzle_Loading {
        fn with(
            &self,
            id: &str,
        ) -> String {
            String::new()
                + "Loading "
                + id
                + ""
        }
    }
    const TABS___TITLES___PUZZLE___ERROR: Tabs_Titles_Puzzle_Error = Tabs_Titles_Puzzle_Error;
    #[derive(Debug, Default, Copy, Clone)]
    struct Tabs_Titles_Puzzle_Error;
    impl Template___id_str for Tabs_Titles_Puzzle_Error {
        fn with(
            &self,
            id: &str,
        ) -> String {
            String::new()
                + "Error loading "
                + id
                + ""
        }
    }
    const PREFS___ANIMATIONS___TWISTS___INTERPOLATIONS___ALIGNMENT: Prefs_Animations_Twists_Interpolations_Alignment = Prefs_Animations_Twists_Interpolations_Alignment;
    #[derive(Debug, Default, Copy, Clone)]
    struct Prefs_Animations_Twists_Interpolations_Alignment;
    impl Template___alignment_str for Prefs_Animations_Twists_Interpolations_Alignment {
        fn with(
            &self,
            alignment: &str,
        ) -> String {
            String::new()
                + "_"
                + alignment
                + "_"
        }
    }
}
