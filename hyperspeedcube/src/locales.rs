/// Autogenerated locale module.
///
/// DO NOT MODIFY THIS FILE DIRECTLY. Instead modify the KDL files.

#[rustfmt::skip]
const LANGS: &[(&'static str, structs::Lang)] = &[
    ("en", en::LANG),
];

#[rustfmt::skip]
#[allow(unused_imports)]
pub use structs::{HoverStrings, Lang, PresetActions, PresetErrors, PresetStrings};
#[rustfmt::skip]
pub use traits::*;

#[rustfmt::skip]
pub mod traits {
    pub trait HasTitle {
        fn title(&self) -> &'static str;
    }

}

#[rustfmt::skip]
#[allow(non_camel_case_types)]
mod structs {
    pub struct Lang {
        pub hello: &'static str,
        pub click_to: ClickTo,
        pub inputs: Inputs,
        pub statuses: Statuses,
        pub reset: &'static str,
        pub reset_to_value: &'static str,
        pub edit_as_plaintext: HoverStrings,
        pub presets: Presets,
        pub prefs: Prefs,
        pub colors: Colors,
        pub help: Help,
    }

    pub struct HoverStrings {
        pub label: &'static str,
        pub full: &'static str,
        pub desc: &'static str,
    }
    impl HoverStrings {
        pub const DEFAULT: Self = Self {
            label: "",
            full: "",
            desc: "",
        };
    }

    pub struct PresetStrings {
        pub saved_presets: &'static str,
        pub current: &'static str,
        pub current_empty: &'static str,
        pub new_name_hint: &'static str,
        pub errors: PresetErrors,
        pub actions: PresetActions,
    }

    pub struct PresetErrors {
        pub empty_name: &'static str,
        pub name_conflict: &'static str,
        pub cannot_delete_last: &'static str,
    }

    pub struct PresetActions {
        pub add: &'static str,
        pub rename: &'static str,
        pub delete: &'static str,
    }

    pub struct ClickTo {
        pub activate: &'static str,
        pub copy_hex: &'static str,
        pub delete: &'static str,
        pub edit: &'static str,
        pub rename: &'static str,
        pub reorder: &'static str,
    }

    pub struct Inputs {
        pub click: &'static str,
        pub right_click: &'static str,
        pub middle_click: &'static str,
        pub drag: &'static str,
    }

    pub struct Statuses {
        pub copied: &'static str,
    }

    pub struct Presets {
        pub save_changes: &'static str,
        pub create_current: &'static str,
        pub overwrite_current: &'static str,
        pub default_preset_name: &'static str,
        pub default: PresetStrings,
        pub animation_settings: PresetStrings,
        pub interaction_settings: PresetStrings,
        pub view_settings: PresetStrings,
        pub piece_filters: PresetStrings,
        pub color_schemes: PresetStrings,
        pub custom_styles: Presets_CustomStyles,
    }

    pub struct Presets_CustomStyles {
        pub saved_presets: &'static str,
        pub current: &'static str,
        pub current_empty: &'static str,
        pub new_name_hint: &'static str,
        pub errors: Presets_CustomStyles_Errors,
        pub actions: Presets_CustomStyles_Actions,
    }

    pub struct Presets_CustomStyles_Errors {
        pub empty_name: &'static str,
        pub name_conflict: &'static str,
        pub cannot_delete_last: &'static str,
    }

    pub struct Presets_CustomStyles_Actions {
        pub add: &'static str,
        pub rename: &'static str,
        pub delete: &'static str,
    }

    pub struct Prefs {
        pub animations: Prefs_Animations,
        pub interaction: Prefs_Interaction,
        pub styles: Prefs_Styles,
        pub view: Prefs_View,
    }

    pub struct Prefs_Animations {
        pub twists: Prefs_Animations_Twists,
        pub other: Prefs_Animations_Other,
    }

    pub struct Prefs_Animations_Twists {
        pub title: &'static str,
        pub dynamic_twist_speed: HoverStrings,
        pub twist_duration: HoverStrings,
    }
    impl super::HasTitle for Prefs_Animations_Twists {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Animations_Other {
        pub title: &'static str,
        pub blocking_animation_duration: HoverStrings,
    }
    impl super::HasTitle for Prefs_Animations_Other {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Interaction {
        pub dialogs: Prefs_Interaction_Dialogs,
        pub reorientation: Prefs_Interaction_Reorientation,
    }

    pub struct Prefs_Interaction_Dialogs {
        pub title: &'static str,
        pub confirm_discard_only_when_scrambled: HoverStrings,
    }
    impl super::HasTitle for Prefs_Interaction_Dialogs {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Interaction_Reorientation {
        pub title: &'static str,
        pub drag_sensitivity: HoverStrings,
        pub realign_puzzle_on_release: HoverStrings,
        pub realign_puzzle_on_keypress: HoverStrings,
        pub smart_realign: HoverStrings,
    }
    impl super::HasTitle for Prefs_Interaction_Reorientation {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles {
        pub misc: Prefs_Styles_Misc,
        pub builtin: Prefs_Styles_Builtin,
        pub color_mode: Prefs_Styles_ColorMode,
        pub color_mode_reset: Prefs_Styles_ColorModeReset,
    }

    pub struct Prefs_Styles_Misc {
        pub title: &'static str,
        pub background: Prefs_Styles_Misc_Background,
        pub internals: Prefs_Styles_Misc_Internals,
        pub blocking_pieces: Prefs_Styles_Misc_BlockingPieces,
    }
    impl super::HasTitle for Prefs_Styles_Misc {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles_Misc_Background {
        pub title: &'static str,
        pub dark_mode: &'static str,
        pub light_mode: &'static str,
    }
    impl super::HasTitle for Prefs_Styles_Misc_Background {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles_Misc_Internals {
        pub title: &'static str,
        pub face_color: HoverStrings,
    }
    impl super::HasTitle for Prefs_Styles_Misc_Internals {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles_Misc_BlockingPieces {
        pub title: &'static str,
        pub outlines_color: HoverStrings,
        pub outlines_size: HoverStrings,
    }
    impl super::HasTitle for Prefs_Styles_Misc_BlockingPieces {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles_Builtin {
        pub title: &'static str,
        pub default: &'static str,
        pub gripped: &'static str,
        pub ungripped: &'static str,
        pub hovered: &'static str,
        pub selected: &'static str,
        pub blindfolded: &'static str,
        pub current_style: &'static str,
    }
    impl super::HasTitle for Prefs_Styles_Builtin {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_Styles_ColorMode {
        pub default: &'static str,
        pub sticker: &'static str,
        pub fixed: &'static str,
    }

    pub struct Prefs_Styles_ColorModeReset {
        pub default: &'static str,
        pub sticker: &'static str,
        pub fixed: &'static str,
    }

    pub struct Prefs_View {
        pub projection: Prefs_View_Projection,
        pub geometry: Prefs_View_Geometry,
        pub lighting: Prefs_View_Lighting,
        pub performance: Prefs_View_Performance,
    }

    pub struct Prefs_View_Projection {
        pub title: &'static str,
        pub fov_4d: HoverStrings,
        pub fov_3d: Prefs_View_Projection_Fov3d,
    }
    impl super::HasTitle for Prefs_View_Projection {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_View_Projection_Fov3d {
        pub label: &'static str,
        pub quake_pro: &'static str,
        pub orp_ekauq: &'static str,
    }

    pub struct Prefs_View_Geometry {
        pub title: &'static str,
        pub show_frontfaces: HoverStrings,
        pub show_backfaces: HoverStrings,
        pub show_behind_4d_camera: HoverStrings,
        pub show_internals: HoverStrings,
        pub gizmo_scale: HoverStrings,
        pub facet_shrink: HoverStrings,
        pub sticker_shrink: HoverStrings,
        pub piece_explode: HoverStrings,
        pub disabled_when_showing_internals: HoverStrings,
    }
    impl super::HasTitle for Prefs_View_Geometry {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_View_Lighting {
        pub title: &'static str,
        pub pitch: HoverStrings,
        pub yaw: HoverStrings,
        pub intensity: Prefs_View_Lighting_Intensity,
    }
    impl super::HasTitle for Prefs_View_Lighting {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Prefs_View_Lighting_Intensity {
        pub faces: HoverStrings,
        pub outlines: HoverStrings,
    }

    pub struct Prefs_View_Performance {
        pub title: &'static str,
        pub downscale_factor: HoverStrings,
        pub downscale_interpolation: HoverStrings,
    }
    impl super::HasTitle for Prefs_View_Performance {
        fn title(&self) -> &'static str { self.title }    }

    pub struct Colors {
        pub global_palette: &'static str,
        pub custom: &'static str,
        pub singles: &'static str,
        pub gradients: &'static str,
        pub builtin: &'static str,
        pub builtin_sets: &'static str,
        pub misc: Colors_Misc,
        pub actions: Colors_Actions,
        pub errors: Colors_Errors,
        pub builtin_gradient: &'static str,
        pub puzzle_color_popup_title: &'static str,
        pub warning_save_changes: &'static str,
    }

    pub struct Colors_Misc {
        pub dark_background: &'static str,
        pub light_background: &'static str,
        pub internal_faces: &'static str,
        pub blocking_pieces_outlines: &'static str,
    }

    pub struct Colors_Actions {
        pub add: &'static str,
        pub rename: &'static str,
        pub delete: &'static str,
        pub sort: &'static str,
        pub sort_by_name: &'static str,
        pub sort_by_lightness: &'static str,
        pub sort_by_count: &'static str,
        pub sort_by_color: &'static str,
    }

    pub struct Colors_Errors {
        pub empty_name: &'static str,
        pub name_conflict: &'static str,
    }

    pub struct Help {
        pub custom_piece_styles: &'static str,
        pub color_assignments_drag_reassign: &'static str,
        pub color_assignments: &'static str,
        pub global_color_palette: &'static str,
        pub piece_filter_presets: &'static str,
        pub piece_filters: &'static str,
        pub presets: &'static str,
    }
}


#[rustfmt::skip]
#[allow(non_upper_case_globals)]
pub mod en {
    use super::structs::*;

    pub const LANG: Lang = Lang {
        hello: "Hello, world!",
        click_to: CLICK_TO,
        inputs: INPUTS,
        statuses: STATUSES,
        reset: "Reset",
        reset_to_value: "Reset to %{value}",
        edit_as_plaintext: EDIT_AS_PLAINTEXT,
        presets: PRESETS,
        prefs: PREFS,
        colors: COLORS,
        help: HELP,
    };
    const CLICK_TO: ClickTo = ClickTo {
        activate: "%{click} to activate",
        copy_hex: "%{click} to copy hex",
        delete: "%{click} to delete",
        edit: "%{click} to edit",
        rename: "%{click} to rename",
        reorder: "%{click} to reorder",
    };
    const INPUTS: Inputs = Inputs {
        click: "**Click**",
        right_click: "**Right-click**",
        middle_click: "**Middle-click** or **alt + click**",
        drag: "**Drag**",
    };
    const STATUSES: Statuses = Statuses {
        copied: "Copied!",
    };
    const EDIT_AS_PLAINTEXT: HoverStrings = HoverStrings {
        full: "Edit as plaintext",
        desc: "View and edit settings as plaintext to share them with others.",
        ..HoverStrings::DEFAULT
    };
    const PRESETS: Presets = Presets {
        save_changes: "Save changes",
        create_current: "Create %{current}",
        overwrite_current: "Overwrite %{current}",
        default_preset_name: "Default",
        default: PRESETS___DEFAULT,
        animation_settings: PRESETS___ANIMATION_SETTINGS,
        interaction_settings: PRESETS___INTERACTION_SETTINGS,
        view_settings: PRESETS___VIEW_SETTINGS,
        piece_filters: PRESETS___PIECE_FILTERS,
        color_schemes: PRESETS___COLOR_SCHEMES,
        custom_styles: PRESETS___CUSTOM_STYLES,
    };
    const PRESETS___DEFAULT: PresetStrings = PresetStrings {
        saved_presets: "Saved presets",
        current: "%{current} preset",
        current_empty: "No preset",
        new_name_hint: "New preset name",
        errors: PRESETS___DEFAULT___ERRORS,
        actions: PRESETS___DEFAULT___ACTIONS,
    };
    const PRESETS___DEFAULT___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Preset name cannot be empty",
        name_conflict: "There is already a preset with this name",
        cannot_delete_last: "Cannot delete last preset",
    };
    const PRESETS___DEFAULT___ACTIONS: PresetActions = PresetActions {
        add: "Add preset",
        rename: "Rename preset",
        delete: "Delete preset",
    };
    const PRESETS___ANIMATION_SETTINGS: PresetStrings = PresetStrings {
        current: "%{current} animation settings",
        current_empty: "No animation settings",
        errors: PRESETS___ANIMATION_SETTINGS___ERRORS,
        actions: PRESETS___ANIMATION_SETTINGS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    const PRESETS___ANIMATION_SETTINGS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    const PRESETS___ANIMATION_SETTINGS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    const PRESETS___INTERACTION_SETTINGS: PresetStrings = PresetStrings {
        current: "%{current} interaction settings",
        current_empty: "No interaction settings",
        errors: PRESETS___INTERACTION_SETTINGS___ERRORS,
        actions: PRESETS___INTERACTION_SETTINGS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    const PRESETS___INTERACTION_SETTINGS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    const PRESETS___INTERACTION_SETTINGS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    const PRESETS___VIEW_SETTINGS: PresetStrings = PresetStrings {
        current: "%{current} view settings",
        current_empty: "No view settings",
        errors: PRESETS___VIEW_SETTINGS___ERRORS,
        actions: PRESETS___VIEW_SETTINGS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    const PRESETS___VIEW_SETTINGS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    const PRESETS___VIEW_SETTINGS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    const PRESETS___PIECE_FILTERS: PresetStrings = PresetStrings {
        current: "%{current} piece filters",
        current_empty: "No piece filters",
        errors: PRESETS___PIECE_FILTERS___ERRORS,
        actions: PRESETS___PIECE_FILTERS___ACTIONS,
        ..PRESETS___DEFAULT
    };
    const PRESETS___PIECE_FILTERS___ERRORS: PresetErrors = PresetErrors {
        ..PRESETS___DEFAULT___ERRORS
    };
    const PRESETS___PIECE_FILTERS___ACTIONS: PresetActions = PresetActions {
        ..PRESETS___DEFAULT___ACTIONS
    };
    const PRESETS___COLOR_SCHEMES: PresetStrings = PresetStrings {
        saved_presets: "Saved color schemes",
        current: "%{current} color scheme",
        current_empty: "No color scheme",
        new_name_hint: "New color scheme name",
        errors: PRESETS___COLOR_SCHEMES___ERRORS,
        actions: PRESETS___COLOR_SCHEMES___ACTIONS,
    };
    const PRESETS___COLOR_SCHEMES___ERRORS: PresetErrors = PresetErrors {
        empty_name: "Color scheme name cannot be empty",
        name_conflict: "There is already a color scheme with this name",
        cannot_delete_last: "Cannot delete last color scheme",
    };
    const PRESETS___COLOR_SCHEMES___ACTIONS: PresetActions = PresetActions {
        add: "Add color scheme",
        rename: "Rename color scheme",
        delete: "Delete color scheme",
    };
    const PRESETS___CUSTOM_STYLES: Presets_CustomStyles = Presets_CustomStyles {
        saved_presets: "Custom styles",
        current: "%{current} style",
        current_empty: "No style",
        new_name_hint: "New style name",
        errors: PRESETS___CUSTOM_STYLES___ERRORS,
        actions: PRESETS___CUSTOM_STYLES___ACTIONS,
    };
    const PRESETS___CUSTOM_STYLES___ERRORS: Presets_CustomStyles_Errors = Presets_CustomStyles_Errors {
        empty_name: "Style name cannot be empty",
        name_conflict: "There is already a style with this name",
        cannot_delete_last: "Cannot delete last custom style",
    };
    const PRESETS___CUSTOM_STYLES___ACTIONS: Presets_CustomStyles_Actions = Presets_CustomStyles_Actions {
        add: "Add style",
        rename: "Rename style",
        delete: "Delete style",
    };
    const PREFS: Prefs = Prefs {
        animations: PREFS___ANIMATIONS,
        interaction: PREFS___INTERACTION,
        styles: PREFS___STYLES,
        view: PREFS___VIEW,
    };
    const PREFS___ANIMATIONS: Prefs_Animations = Prefs_Animations {
        twists: PREFS___ANIMATIONS___TWISTS,
        other: PREFS___ANIMATIONS___OTHER,
    };
    const PREFS___ANIMATIONS___TWISTS: Prefs_Animations_Twists = Prefs_Animations_Twists {
        title: "Twists",
        dynamic_twist_speed: PREFS___ANIMATIONS___TWISTS___DYNAMIC_TWIST_SPEED,
        twist_duration: PREFS___ANIMATIONS___TWISTS___TWIST_DURATION,
    };
    const PREFS___ANIMATIONS___TWISTS___DYNAMIC_TWIST_SPEED: HoverStrings = HoverStrings {
        label: "Dynamic twist speed",
        desc: "When enabled, the puzzle twists faster when many moves are queued up. When all queued moves are complete, the twist speed resets.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___ANIMATIONS___TWISTS___TWIST_DURATION: HoverStrings = HoverStrings {
        label: "Twist duration",
        ..HoverStrings::DEFAULT
    };
    const PREFS___ANIMATIONS___OTHER: Prefs_Animations_Other = Prefs_Animations_Other {
        title: "Other",
        blocking_animation_duration: PREFS___ANIMATIONS___OTHER___BLOCKING_ANIMATION_DURATION,
    };
    const PREFS___ANIMATIONS___OTHER___BLOCKING_ANIMATION_DURATION: HoverStrings = HoverStrings {
        label: "Blocking animation duration",
        desc: "Duration of the animation when a piece is blocking a twist.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___INTERACTION: Prefs_Interaction = Prefs_Interaction {
        dialogs: PREFS___INTERACTION___DIALOGS,
        reorientation: PREFS___INTERACTION___REORIENTATION,
    };
    const PREFS___INTERACTION___DIALOGS: Prefs_Interaction_Dialogs = Prefs_Interaction_Dialogs {
        title: "Dialogs",
        confirm_discard_only_when_scrambled: PREFS___INTERACTION___DIALOGS___CONFIRM_DISCARD_ONLY_WHEN_SCRAMBLED,
    };
    const PREFS___INTERACTION___DIALOGS___CONFIRM_DISCARD_ONLY_WHEN_SCRAMBLED: HoverStrings = HoverStrings {
        label: "Confirm discard only when scrambled",
        desc: "When enabled, a confirmation dialog before destructive actions (like resetting the puzzle)is only shown when the puzzle has been fully scrambled.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___INTERACTION___REORIENTATION: Prefs_Interaction_Reorientation = Prefs_Interaction_Reorientation {
        title: "Reorientation",
        drag_sensitivity: PREFS___INTERACTION___REORIENTATION___DRAG_SENSITIVITY,
        realign_puzzle_on_release: PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_RELEASE,
        realign_puzzle_on_keypress: PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_KEYPRESS,
        smart_realign: PREFS___INTERACTION___REORIENTATION___SMART_REALIGN,
    };
    const PREFS___INTERACTION___REORIENTATION___DRAG_SENSITIVITY: HoverStrings = HoverStrings {
        label: "Drag sensitivity",
        ..HoverStrings::DEFAULT
    };
    const PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_RELEASE: HoverStrings = HoverStrings {
        label: "Realign puzzle on release",
        desc: "When enabled, the puzzle snaps back immediately when the mouse is released after dragging to rotate it.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___INTERACTION___REORIENTATION___REALIGN_PUZZLE_ON_KEYPRESS: HoverStrings = HoverStrings {
        label: "Realign puzzle on keypress",
        desc: "When enabled, the puzzle snaps back immediately when the keyboard is used to grip or do a move.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___INTERACTION___REORIENTATION___SMART_REALIGN: HoverStrings = HoverStrings {
        label: "Smart realign",
        desc: "When enabled, the puzzle snaps to the nearest similar orientation, not the original. This adds a full-puzzle rotation to the undo history.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___STYLES: Prefs_Styles = Prefs_Styles {
        misc: PREFS___STYLES___MISC,
        builtin: PREFS___STYLES___BUILTIN,
        color_mode: PREFS___STYLES___COLOR_MODE,
        color_mode_reset: PREFS___STYLES___COLOR_MODE_RESET,
    };
    const PREFS___STYLES___MISC: Prefs_Styles_Misc = Prefs_Styles_Misc {
        title: "Miscellaneous styles",
        background: PREFS___STYLES___MISC___BACKGROUND,
        internals: PREFS___STYLES___MISC___INTERNALS,
        blocking_pieces: PREFS___STYLES___MISC___BLOCKING_PIECES,
    };
    const PREFS___STYLES___MISC___BACKGROUND: Prefs_Styles_Misc_Background = Prefs_Styles_Misc_Background {
        title: "Background",
        dark_mode: "Dark mode",
        light_mode: "Light mode",
    };
    const PREFS___STYLES___MISC___INTERNALS: Prefs_Styles_Misc_Internals = Prefs_Styles_Misc_Internals {
        title: "Internals",
        face_color: PREFS___STYLES___MISC___INTERNALS___FACE_COLOR,
    };
    const PREFS___STYLES___MISC___INTERNALS___FACE_COLOR: HoverStrings = HoverStrings {
        label: "Face color",
        full: "Internal faces color",
        desc: "For 3D puzzles, it's sometimes possible to view the internal faces of pieces, particularly mid-turn or using **piece explode**. You can configure whether internal faces are visible in **view settings**.\n",
    };
    const PREFS___STYLES___MISC___BLOCKING_PIECES: Prefs_Styles_Misc_BlockingPieces = Prefs_Styles_Misc_BlockingPieces {
        title: "Blocking pieces",
        outlines_color: PREFS___STYLES___MISC___BLOCKING_PIECES___OUTLINES_COLOR,
        outlines_size: PREFS___STYLES___MISC___BLOCKING_PIECES___OUTLINES_SIZE,
    };
    const PREFS___STYLES___MISC___BLOCKING_PIECES___OUTLINES_COLOR: HoverStrings = HoverStrings {
        label: "Outlines color",
        full: "Blocking pieces outlines color",
        desc: "Outline color for pieces blocking a move. This is only visible for puzzles that bandage.\n",
    };
    const PREFS___STYLES___MISC___BLOCKING_PIECES___OUTLINES_SIZE: HoverStrings = HoverStrings {
        label: "Outlines size",
        full: "Blocking pieces outlines size",
        desc: "Outline size for pieces blocking a move. This is only visible for puzzles that bandage.\n",
    };
    const PREFS___STYLES___BUILTIN: Prefs_Styles_Builtin = Prefs_Styles_Builtin {
        title: "Built-in style",
        default: "Default",
        gripped: "Gripped",
        ungripped: "Ungripped",
        hovered: "Hovered",
        selected: "Selected",
        blindfolded: "Blindfolded",
        current_style: "%{current} style",
    };
    const PREFS___STYLES___COLOR_MODE: Prefs_Styles_ColorMode = Prefs_Styles_ColorMode {
        default: "Default color",
        sticker: "Sticker color",
        fixed: "Fixed color",
    };
    const PREFS___STYLES___COLOR_MODE_RESET: Prefs_Styles_ColorModeReset = Prefs_Styles_ColorModeReset {
        default: "default color",
        sticker: "sticker color",
        fixed: "fixed color %{color}",
    };
    const PREFS___VIEW: Prefs_View = Prefs_View {
        projection: PREFS___VIEW___PROJECTION,
        geometry: PREFS___VIEW___GEOMETRY,
        lighting: PREFS___VIEW___LIGHTING,
        performance: PREFS___VIEW___PERFORMANCE,
    };
    const PREFS___VIEW___PROJECTION: Prefs_View_Projection = Prefs_View_Projection {
        title: "Projection",
        fov_4d: PREFS___VIEW___PROJECTION___FOV_4D,
        fov_3d: PREFS___VIEW___PROJECTION___FOV_3D,
    };
    const PREFS___VIEW___PROJECTION___FOV_4D: HoverStrings = HoverStrings {
        label: "4D FOV",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___PROJECTION___FOV_3D: Prefs_View_Projection_Fov3d = Prefs_View_Projection_Fov3d {
        label: "3D FOV",
        quake_pro: "QUAKE PRO",
        orp_ekauq: "ORP EKAUQ",
    };
    const PREFS___VIEW___GEOMETRY: Prefs_View_Geometry = Prefs_View_Geometry {
        title: "Geometry",
        show_frontfaces: PREFS___VIEW___GEOMETRY___SHOW_FRONTFACES,
        show_backfaces: PREFS___VIEW___GEOMETRY___SHOW_BACKFACES,
        show_behind_4d_camera: PREFS___VIEW___GEOMETRY___SHOW_BEHIND_4D_CAMERA,
        show_internals: PREFS___VIEW___GEOMETRY___SHOW_INTERNALS,
        gizmo_scale: PREFS___VIEW___GEOMETRY___GIZMO_SCALE,
        facet_shrink: PREFS___VIEW___GEOMETRY___FACET_SHRINK,
        sticker_shrink: PREFS___VIEW___GEOMETRY___STICKER_SHRINK,
        piece_explode: PREFS___VIEW___GEOMETRY___PIECE_EXPLODE,
        disabled_when_showing_internals: PREFS___VIEW___GEOMETRY___DISABLED_WHEN_SHOWING_INTERNALS,
    };
    const PREFS___VIEW___GEOMETRY___SHOW_FRONTFACES: HoverStrings = HoverStrings {
        label: "Show frontfaces",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___SHOW_BACKFACES: HoverStrings = HoverStrings {
        label: "Show backfaces",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___SHOW_BEHIND_4D_CAMERA: HoverStrings = HoverStrings {
        label: "Show behind 4D camera",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___SHOW_INTERNALS: HoverStrings = HoverStrings {
        label: "Show internals",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___GIZMO_SCALE: HoverStrings = HoverStrings {
        label: "Gizmo scale",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___FACET_SHRINK: HoverStrings = HoverStrings {
        label: "Facet shrink",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___STICKER_SHRINK: HoverStrings = HoverStrings {
        label: "Sticker shrink",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___PIECE_EXPLODE: HoverStrings = HoverStrings {
        label: "Piece explode",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___GEOMETRY___DISABLED_WHEN_SHOWING_INTERNALS: HoverStrings = HoverStrings {
        label: "Disabled when showing internals",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___LIGHTING: Prefs_View_Lighting = Prefs_View_Lighting {
        title: "Lighting",
        pitch: PREFS___VIEW___LIGHTING___PITCH,
        yaw: PREFS___VIEW___LIGHTING___YAW,
        intensity: PREFS___VIEW___LIGHTING___INTENSITY,
    };
    const PREFS___VIEW___LIGHTING___PITCH: HoverStrings = HoverStrings {
        label: "Pitch",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___LIGHTING___YAW: HoverStrings = HoverStrings {
        label: "Yaw",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___LIGHTING___INTENSITY: Prefs_View_Lighting_Intensity = Prefs_View_Lighting_Intensity {
        faces: PREFS___VIEW___LIGHTING___INTENSITY___FACES,
        outlines: PREFS___VIEW___LIGHTING___INTENSITY___OUTLINES,
    };
    const PREFS___VIEW___LIGHTING___INTENSITY___FACES: HoverStrings = HoverStrings {
        label: "Intensity (faces)",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___LIGHTING___INTENSITY___OUTLINES: HoverStrings = HoverStrings {
        label: "Intensity (outlines)",
        desc: "This is also enabled or disabled for each style in the style settings. For dark outline colors, it may have little or no effect.\n",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___PERFORMANCE: Prefs_View_Performance = Prefs_View_Performance {
        title: "Performance",
        downscale_factor: PREFS___VIEW___PERFORMANCE___DOWNSCALE_FACTOR,
        downscale_interpolation: PREFS___VIEW___PERFORMANCE___DOWNSCALE_INTERPOLATION,
    };
    const PREFS___VIEW___PERFORMANCE___DOWNSCALE_FACTOR: HoverStrings = HoverStrings {
        label: "Downscale factor",
        ..HoverStrings::DEFAULT
    };
    const PREFS___VIEW___PERFORMANCE___DOWNSCALE_INTERPOLATION: HoverStrings = HoverStrings {
        label: "Downscale interpolation",
        ..HoverStrings::DEFAULT
    };
    const COLORS: Colors = Colors {
        global_palette: "Global color palette",
        custom: "Custom colors",
        singles: "Single colors",
        gradients: "Gradients",
        builtin: "Built-in colors",
        builtin_sets: "Built-in color sets",
        misc: COLORS___MISC,
        actions: COLORS___ACTIONS,
        errors: COLORS___ERRORS,
        builtin_gradient: "Built-in gradient",
        puzzle_color_popup_title: "%{puzzle_color} color",
        warning_save_changes: "Don't forget to save your changes in the color scheme settings!",
    };
    const COLORS___MISC: Colors_Misc = Colors_Misc {
        dark_background: "Background (dark mode)",
        light_background: "Background (light mode)",
        internal_faces: "Internal faces",
        blocking_pieces_outlines: "Blocking pieces outlines",
    };
    const COLORS___ACTIONS: Colors_Actions = Colors_Actions {
        add: "Add color",
        rename: "Rename color",
        delete: "Delete color",
        sort: "Sort colors",
        sort_by_name: "Sort by name",
        sort_by_lightness: "Sort by lightness (Oklab)",
        sort_by_count: "Sort by count",
        sort_by_color: "Sort by color",
    };
    const COLORS___ERRORS: Colors_Errors = Colors_Errors {
        empty_name: "Color name cannot be empty",
        name_conflict: "There is already a color with this name",
    };
    const HELP: Help = Help {
        custom_piece_styles: "# Custom piece styles\n\nCustom styles can be applied to pieces using the **piece filters** tool.\n",
        color_assignments_drag_reassign: "Drag a facet name to assign a different color to it.",
        color_assignments: "# Color assignments\n\nEach facet on the puzzle is assigned a different color.\n\n%{dragging}\n\nIn addition to the color scheme settings, you can **%{color_reassign_mousebind}** a sticker to change its color assignment.\n\n- Single colors are best for small puzzles\n- Color sets are best for medium puzzles\n- Gradients are best for large puzzles\n- Colors within a color set are designed to contrast with each other and with other color sets of the same size\n\nColor values can be customized in the **global color palette** settings.\n",
        global_color_palette: "# Global color palette\n\nThe global color palette provides a way to change colors across all puzzles at once.\n\nFor example, you can select a particular shade of red to use on every puzzle with red stickers.\n\n## Color sets\n\nSome colors are organized into sets of colors that are similar but still contrast with each other.\n\nFor example, a puzzle with two different shades of red needs those shades to be distinguishable, so it uses the \"red dyad\" from the global color palette.\n\n## Color schemes\n\nThe color scheme for any particular puzzle can be customized in the **color scheme** settings.\n",
        piece_filter_presets: "# Piece filter presets\n\nTODO: explain filter presets\n",
        piece_filters: "# Piece filters\n\nTODO: explain filters\n",
        presets: "# Presets\n\nA **preset** is a saved set of values that can be loaded at any time.\n\n- **Click** the `+` button to create a preset\n- **Click** a preset to activate it\n- **Right-click** a preset to rename or delete it\n- **Drag** a preset to reorder it\n\nLoading a preset discards unsaved changes.\n",
    };
}
